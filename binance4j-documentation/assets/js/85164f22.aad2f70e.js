"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5769],{1345:(e,n,t)=>{t.d(n,{ZP:()=>d});var a=t(814),c=t(5162),l=t(5488),i=t(7294);function o(e){return i.createElement(a.Z,{language:"java"},"try{\n    "+e.payload+" res = client."+e.method+".sync();\n}catch(ApiException e){ \n//...\n}")}function s(e){return i.createElement(a.Z,{language:"java"},"client."+e.method+".async(response->{\n//...\n});")}function r(e){const n=e.payload?e.payload+" response":"";return i.createElement(a.Z,{language:"java"},"client."+e.method+".async(new ApiCallback<"+(e.payload?e.payload:"Void")+">() {\n    @Override\n    public void onResponse("+n+") {\n        //...\n    }\n\n    @Override\n    public void onFailure(ApiException exception) {\n        //...\n    }\n});\n")}function d(e){return i.createElement(i.Fragment,null,i.createElement(l.Z,null,i.createElement(c.Z,{label:"Sync",value:"sync",default:!0},i.createElement(o,e)),i.createElement(c.Z,{label:"Async (lambda)",value:"async-lambda"},i.createElement(s,e)),i.createElement(c.Z,{label:"Async (ApiCallback)",value:"async-api-callback"},i.createElement(r,e))))}},4344:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=t(7462),c=(t(7294),t(3905)),l=t(2328),i=t(9098);t(1345);const o={title:"Connectors"},s=void 0,r={unversionedId:"connectors",id:"connectors",title:"Connectors",description:"Description",source:"@site/docs/15-connectors.mdx",sourceDirName:".",slug:"/connectors",permalink:"/binance4j/binance4j-documentation/docs/next/connectors",draft:!1,editUrl:"https://github.com/binance4j/docs/15-connectors.mdx",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"Connectors"},sidebar:"tutorialSidebar",previous:{title:"Core",permalink:"/binance4j/binance4j-documentation/docs/next/Core"},next:{title:"BLVT endpoints",permalink:"/binance4j/binance4j-documentation/docs/next/blvt"}},d={},p=[{value:"Description",id:"description",level:2},{value:"Installation",id:"installation",level:2},{value:"Connectors class",id:"connectors-class",level:2},{value:"Calling a client",id:"calling-a-client",level:2},{value:"Update the API keys",id:"update-the-api-keys",level:2}],u={toc:p};function m(e){let{components:n,...t}=e;return(0,c.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)(i.Z,{artifact:"connectors",mdxType:"RepoBadges"}),(0,c.kt)("h2",{id:"description"},"Description"),(0,c.kt)("p",null,"All Binance4j REST clients in one place."),(0,c.kt)("h2",{id:"installation"},"Installation"),(0,c.kt)(l.ZP,{repo:"connectors",mdxType:"ArtifactInstall"}),(0,c.kt)("h2",{id:"connectors-class"},"Connectors class"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"Conectors")," class is the entry point of every client. It receives the API keys at instantiation."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-java"},"Connectors connectors = new Connectors(key, secret);\n")),(0,c.kt)("h2",{id:"calling-a-client"},"Calling a client"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"Conectors")," instance will lazy load the clients, meaning it won't instantiate every client at once but just when needed.\nThe client is then cached an the same instance is returned every time."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-java"},"// First call, the client is instantiated.\nconnectors.marketClient().getServerTime().sync();\n// Second call, the same instance is returned.\nconnectors.marketClient().getBookTicker().sync();\n")),(0,c.kt)("h2",{id:"update-the-api-keys"},"Update the API keys"),(0,c.kt)("p",null,"Every time you call a client, it will check if its keys are equal to the container keys and update them if not. This feature is really useful if you want to implement a proxy server for multiple users for example."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-java"},"//Updating keys in the container\nconnectors.updateKeys(key,secret);\n//keys have changed, they are updated in the client when it is called\nconnectors.spotClient();\n//keys haven't changed, nothing happens\nconnectors.spotClient();\n")))}m.isMDXComponent=!0}}]);