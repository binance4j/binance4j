"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[956],{6028:function(e,t,n){n.d(t,{ZP:function(){return d}});var a=n(3066),i=n(5162),r=n(5488),o=n(7294),l=function(e){return e.client+" client = new "+e.client+"("+e.constructorParams.join(", ")+");\n\n"},s=function(e){return e.requestType?e.requestType+" request = new "+e.requestType+"("+(e.requestParameters?e.requestParameters.join(", "):"")+");\n\n":""};function p(e){var t=e.responseType?e.responseType+" response = ":"";return o.createElement(a.Z,{language:"java"},""+l(e)+s(e)+"try{\n    "+t+"client."+e.method+"("+(e.requestType?"request":"")+").execute();\n}catch(ApiException e){ \n//...\n}\n")}function c(e){return o.createElement(a.Z,{language:"java"},""+l(e)+s(e)+"client."+e.method+"("+(e.requestType?"request":"")+").then(response->{\n  //...\n});\n")}function u(e){var t=e.responseType?e.responseType+" response":"";return o.createElement(a.Z,{language:"java"},""+l(e)+s(e)+"client."+e.method+"().then(new ApiCallback<"+(e.responseType?e.responseType:"Void")+">() {\n    @Override\n    public void onResponse("+t+") {\n        //...\n    }\n\n    @Override\n    public void onFailure(ApiException exception) {\n        //...\n    }\n});\n")}function d(e){return o.createElement(o.Fragment,null,o.createElement(r.Z,null,o.createElement(i.Z,{label:"Sync",value:"sync",default:!0},o.createElement(p,e)),o.createElement(i.Z,{label:"Async (lambda)",value:"async-lambda"},o.createElement(c,e)),o.createElement(i.Z,{label:"Async (ApiCallback)",value:"async-api-callback"},o.createElement(u,e))))}},389:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return k}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n(112),l=n(9098),s=n(6028),p=n(8306),c=["components"],u={title:"Core"},d=void 0,m={unversionedId:"Core",id:"Core",title:"Core",description:"Description",source:"@site/docs/03-Core.mdx",sourceDirName:".",slug:"/Core",permalink:"/binance4j/docs/Core",draft:!1,editUrl:"https://github.com/binance4j/docs/03-Core.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Core"},sidebar:"tutorialSidebar",next:{title:"Market",permalink:"/binance4j/docs/Market"}},h={},k=[{value:"Description",id:"description",level:2},{value:"Installation",id:"installation",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"API Mapping",id:"api-mapping",level:2},{value:"RestClient",id:"restclient",level:2},{value:"RequestExecutor",id:"requestexecutor",level:2},{value:"ApiCallback",id:"apicallback",level:2},{value:"WebsocketCallback",id:"websocketcallback",level:2},{value:"ApiException",id:"apiexception",level:2},{value:"Testnet",id:"testnet",level:2}],b={toc:k};function v(e){var t=e.components,n=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{artifact:"core",version:p.i,mdxType:"RepoBadges"}),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Binance4j-core is the core module of the binance4j ecosystem."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(o.Z,{repo:"core",version:p.i,mdxType:"InstallationInstructions"}),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://projectlombok.org/"},"Lombok")," : Prevent boilerplate code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://square.github.io/okhttp/"},"OkHttp")," : HTTP && Websocket clients"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://square.github.io/retrofit/"},"Retrofit")," : Map API endpoints with annotations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/FasterXML/jackson"},"Jackson")," : Payload deserialization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://commons.apache.org/proper/commons-codec/"},"Apache Common Codecs")," : Encode/decode urls")),(0,r.kt)("h2",{id:"api-mapping"},"API Mapping"),(0,r.kt)("p",null,"Every client mapping is represented by an interface with anotated methods defining the endpoint, the HTTP method, the request parameters, the response payload and when it must include the API credentials. This mapping is used by it's corresponding HTTP client."),(0,r.kt)("p",null,"Here is a snippet of the SpotMapping code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public interface SpotMapping {\n    /** The API key header */\n    public static final String API_H = AuthenticationInterceptor.ENDPOINT_SECURITY_TYPE_APIKEY_HEADER;\n    /** The signed header */\n    public static final String SIGNED_H = AuthenticationInterceptor.ENDPOINT_SECURITY_TYPE_SIGNED_HEADER;\n\n    @Headers({ API_H, SIGNED_H })\n    @POST("/api/v3/order")\n    Call<NewOrderResponse> newOrder(@QueryMap Map<String, Object> map);\n}\n')),(0,r.kt)("p",null,"Here we defined that sending an order requires to call ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/v3/order")," endpoint with the order query params and include the public and signed keys in the headers."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The query parameters are converted from a ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," Object to a Map by the client."))),(0,r.kt)("h2",{id:"restclient"},"RestClient"),(0,r.kt)("p",null,"Every HTTP client inherits from the ",(0,r.kt)("inlineCode",{parentName:"p"},"RestClient")," class.\nMost of their constructor must receive a valid ",(0,r.kt)("inlineCode",{parentName:"p"},"API KEY")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SECRET KEY")," to be able to retrieve sensible data.\nClients are linked to a Retrofit mappinq interface. Every method returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestExecutor")," instance with a list of Retrofit calls for each available server."),(0,r.kt)("p",null,"Here is a snippet of the SpotClient code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class SpotClient extends RestClient<SpotMapping> {\n\n    public SpotClient(String key, String secret, Boolean useTestnet) {\n        super(SpotMapping.class, key, secret, useTestnet);\n    }\n\n    public SpotClient(String key, String secret) {\n        this(key, secret, false);\n    }\n\n    public RequestExecutor<NewOrderResponse> newOrder(NewOrder order) {\n        return new RequestExecutor<>(getServices().stream().map(a -> a.newOrder(pojoToMap(order))).toList(), order);\n    }\n}\n")),(0,r.kt)("p",null,"HTTP clients can be configured through ",(0,r.kt)("inlineCode",{parentName:"p"},"RestClient")," static parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"apiPrefixes : The available servers (Default prefixes: api, api1, api2, api3)"),(0,r.kt)("li",{parentName:"ul"},"baseDomain : The API base domain (Default: binance.com)"),(0,r.kt)("li",{parentName:"ul"},"testnetDomain : The testnet API base domain (Default: testnet.binance.vision)"),(0,r.kt)("li",{parentName:"ul"},"timeInForce : how long an order will remain active before it is executed or expires (Default: TimeInForce.GTC)"),(0,r.kt)("li",{parentName:"ul"},"maxRequestsPerHost : max simultaneous requests per host (Default: 500)"),(0,r.kt)("li",{parentName:"ul"},"maxRequests : max simultaneous requests (Default: 500)")),(0,r.kt)("h2",{id:"requestexecutor"},"RequestExecutor"),(0,r.kt)("p",null,"It is not the client method that calls the API.\nEvery method returns an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestExecutor")," that is able to make sync and async request to the API.\nWhy not use directly the client method?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Binance limits the number of request you can make in a defined interval of time but also limits requests by weight. Every request has its own weight. You can get the request weight with the Executor before calling the API and rate limit the requests to prevent being banned from the API."),(0,r.kt)("li",{parentName:"ul"},"Binance is hosted on 4 servers represented by 4 prefixes. If one server is down, you can change it thanks to the Executor."),(0,r.kt)("li",{parentName:"ul"},"It divides the clients code by 2.")),(0,r.kt)("p",null,"Here is an example of every possible type of request:"),(0,r.kt)(s.ZP,{client:"SpotClient",constructorParams:["key","secret"],method:"newOrder",responseType:"NewOrderResponse",requestType:"NewOrder",requestParameters:['"BNBBTC"',"OrderType.MARKET","OrderSide.BUY",'new BigDecimal("100")'],mdxType:"Examples"}),(0,r.kt)("h2",{id:"apicallback"},"ApiCallback"),(0,r.kt)("p",null,"Every async call to the API made by the ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestExecutor")," is handled by a functional interface: ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiCallback"),"."),(0,r.kt)("p",null,"The interface has two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"onResponse : it passes the deserialized data returned by the API."),(0,r.kt)("li",{parentName:"ul"},"onFailure : it passes an ",(0,r.kt)("inlineCode",{parentName:"li"},"ApiException")," if something went wrong.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponse")," handler is the default handler. It makes it possible for the async ",(0,r.kt)("inlineCode",{parentName:"p"},"then")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestExecutor")," to just use a lambda but it is not recommended as you would not be able to handle an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException"),"."),(0,r.kt)("h2",{id:"websocketcallback"},"WebsocketCallback"),(0,r.kt)("p",null,"Every Websocket client is using an inner ",(0,r.kt)("inlineCode",{parentName:"p"},"WebsocketCallback")," to handle every connection event:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"onResponse : Triggered when the server sends data"),(0,r.kt)("li",{parentName:"ul"},"onFailure : Triggered when the connection fails, deserialization fails, the server has not sent data for a long time."),(0,r.kt)("li",{parentName:"ul"},"onClosing : Triggered when the connection is closing"),(0,r.kt)("li",{parentName:"ul"},"onClosed : Triggered when the connection is closed"),(0,r.kt)("li",{parentName:"ul"},"onOpen : Triggered when the connection is open")),(0,r.kt)("h2",{id:"apiexception"},"ApiException"),(0,r.kt)("p",null,"Any exception thrown by Binance4j is an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException"),". It contains a specific error message and an ",(0,r.kt)("inlineCode",{parentName:"p"},"ErrorCode")," enum linked to an integer error code."),(0,r.kt)("p",null,"These exceptions are thrown by sync methods and passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onFailure")," method of an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiCallback")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"WebsocketCallback")," instance."),(0,r.kt)("h2",{id:"testnet"},"Testnet"),(0,r.kt)("p",null,"Clients can connect to Binance Testnet servers"),(0,r.kt)("p",null,"From Binance:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The testnet is a test environment for Binance Chain network, run by the Binance Chain development community, which is open to developers.\nThe validators on the testnet are from development team.\nYou can connect a node to the testnet by downloading the node binary to use this configuration.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.binance.org/guides/testnet.html#:~:text=The%20testnet%20is%20a%20test,binary%20to%20use%20this%20configuration."},"More")))}v.isMDXComponent=!0}}]);