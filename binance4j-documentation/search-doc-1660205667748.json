[{"title":"Change Log","type":0,"sectionRef":"#","url":"docs/1.x/changelog","content":"","keywords":""},{"title":"[1.7.5] - 2022-06-16​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#175---2022-06-16","content":""},{"title":"Fixed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#fixed","content":"binance4j-strategy PATCH : Fixed SymbolBar conversion that was lower rounding decimals "},{"title":"[1.7.4] - 2022-06-14​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#174---2022-06-14","content":""},{"title":"Fixed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#fixed-1","content":"all PATCH : Fixed java 9+ methods. "},{"title":"[1.7.3] - 2022-05-26​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#173---2022-05-26","content":""},{"title":"Fixed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#fixed-2","content":"binance4j-websocket PATCH : Corrected UserDataUpdatePayloadType deserialization. "},{"title":"[1.7.2] - 2022-05-26​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#172---2022-05-26","content":""},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed","content":"binance4j-nft MINOR : Moved packages mistakenly put in the client package (asset, deposit, transaction and withdraw). "},{"title":"[1.7.1] - 2022-05-26​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#171---2022-05-26","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added","content":"binance4j-market MINOR : Added MarketDataClient constructor with implicit testnet to false. "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-1","content":"binance4j-core MINOR : Request#receivingWindow renamed to recvWindow to match API requirements. "},{"title":"[1.7.0] - 2022-05-25​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#170---2022-05-25","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-1","content":"binance4j-strategy MINOR : Created SymbolBar class inheriting from Bar with the name of the symbol attached to it.MINOR : Strategy#watch method can now receive a list of symbols as parameter. "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-2","content":"binance4j-strategy MINOR : WebsocketCallback#onMessage handler passes SymbolBar instead of Bar in order to know the symbol of the bar when watching multiple pairs. "},{"title":"Fixed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#fixed-3","content":"binance4j-strategy PATCH : BaseTradingStrategy was sharing the same BarSeries when watching multiple symbols. Now they have their own. "},{"title":"[1.6.0] - 2022-05-25​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#160---2022-05-25","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-2","content":"binance4j-websocket Added static websocketPort field in WebsocketClient. "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-3","content":"binance4j-core MINOR : Deleted CoreConfiguration and moved global parameters to corresponding classes. binance4j-spot MINOR : Classes in status and cancelorder package moved to order package. "},{"title":"[1.5.0] - 2022-05-24​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#150---2022-05-24","content":""},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-4","content":"binance4j-core MINOR : Classes in cancelorder package moved to order package. "},{"title":"[1.4.6] - 2022-05-24​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#146---2022-05-24","content":""},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-5","content":"binance4j-market MINOR : TickerPrice renamed to PriceTicker. binance4j-wallet MINOR : FuturesSnapshot renamed to FuturesAccountSnapshot. binance4j-websocket MINOR : WebSocketClient renamed to WebsocketClient. "},{"title":"[1.4.5] - 2022-05-24​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#145---2022-05-24","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-3","content":"binance4j-core MINOR : Added DESERIALIZATION_FAILURE value to ApiErrorCode enum. "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-6","content":"binance4j-websocket PATCH : WebsocketClient now triggers onFailure when payload deserialization fails instead of printing Exception. "},{"title":"[1.4.4] - 2022-05-23​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#144---2022-05-23","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-4","content":"binance4j-wallet MINOR : Added constructors to DepositHistoryRequest.MINOR : Added constructors to WithdrawHistoryRequest. "},{"title":"[1.4.3] - 2022-05-21​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#143---2022-05-21","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-5","content":"binance4j-core RestClient no longer pings the server. binance4j-websocket MINOR : WebsocketClient automatically reconnects if connection is lost by default.MINOR : WebsocketClient times out after a certain amount of time without response. Coupled with auto reconnection, streams should always be on.MINOR : WebsocketCandlestickClient automatically sets noResponseTimeout according to defined CandlestickInterval.MINOR : UserDataWebsocketClient automatically extends listenKey lifespan every 30 minutes by default. "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-7","content":"binance4j-core MINOR : PingInterval removed from CoreConfiguration. binance4j-spot MINOR : Removed user data endpoints. binance4j-strategy MINOR : DurationService moved to binance4j-websocket. "},{"title":"[1.4.2] - 2022-05-20​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#142---2022-05-20","content":""},{"title":"Fixed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#fixed-4","content":"binance4j-strategy PATCH : Added a BarSeries max size to prevent memory overload "},{"title":"[1.4.0] - 2022-05-20​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#140---2022-05-20","content":""},{"title":"Added​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#added-6","content":"binance4j-strategy MINOR : Added analyse on CandleStickBar listsMINOR : Added convertions on BarSeriesService binance4j-websocket MINOR : Created UserDataClient taking SpotClient user data methods to prevent artifact dependency.MINOR : Added keepAlive and keepAliveKey methods "},{"title":"Changed​","type":1,"pageTitle":"Change Log","url":"docs/1.x/changelog#changed-8","content":"binance4j-spot MINOR : Deprecated SpotClient user data methods and moved to binance4j-websocket "},{"title":"Core","type":0,"sectionRef":"#","url":"docs/1.x/Core","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#description","content":"Binance4j-core is the core module of the binance4j ecosystem. "},{"title":"Installation​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#dependencies","content":"Lombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"API Mapping​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#api-mapping","content":"Every client mapping is represented by an interface with anotated methods defining the endpoint, the HTTP method, the request parameters, the response payload and when it must include the API credentials. This mapping is used by it's corresponding HTTP client. Here is a snippet of the SpotMapping code: public interface SpotMapping extends RestMapping { /** The API key header */ public static final String API_H = AuthenticationInterceptor.ENDPOINT_SECURITY_TYPE_APIKEY_HEADER; /** The signed header */ public static final String SIGNED_H = AuthenticationInterceptor.ENDPOINT_SECURITY_TYPE_SIGNED_HEADER; @Headers({ API_H, SIGNED_H }) @POST(&quot;/api/v3/order&quot;) Call&lt;NewOrderResponse&gt; newOrder(@QueryMap Map&lt;String, Object&gt; map); }  Here we defined that sending an order requires to call POST on /api/v3/order endpoint with the order query params and include the public and signed keys in the headers. note The query parameters are converted from a Request Object to a Map by the client. "},{"title":"RestClient​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#restclient","content":"Every HTTP client inherits from the RestClient class. Most of their constructor must receive a valid API KEY and SECRET KEY to be able to retrieve sensible data. Clients are linked to a Retrofit mappinq interface. Every method returns a RequestExecutor instance with a list of Retrofit calls for each available server. Here is a snippet of the SpotClient code: public class SpotClient extends RestClient&lt;SpotMapping&gt; { public SpotClient(String key, String secret, Boolean useTestnet) { super(SpotMapping.class, key, secret, useTestnet); } public SpotClient(String key, String secret) { this(key, secret, false); } public RequestExecutor&lt;NewOrderResponse&gt; newOrder(NewOrder order) { return new RequestExecutor&lt;&gt;(getServices().stream().map(a -&gt; a.newOrder(pojoToMap(order))).toList(), order); } }  HTTP clients can be configured through RestClient static parameters: apiPrefixes : The available servers (Default prefixes: api, api1, api2, api3)baseDomain : The API base domain (Default: binance.com)testnetDomain : The testnet API base domain (Default: testnet.binance.vision)timeInForce : how long an order will remain active before it is executed or expires (Default: TimeInForce.GTC)maxRequestsPerHost : max simultaneous requests per host (Default: 500)maxRequests : max simultaneous requests (Default: 500) "},{"title":"RequestExecutor​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#requestexecutor","content":"It is not the client method that calls the API. Every method returns an instance of RequestExecutor that is able to make sync and async request to the API. Why not use directly the client method? Binance limits the number of request you can make in a defined interval of time but also limits requests by weight. Every request has its own weight. You can get the request weight with the Executor before calling the API and rate limit the requests to prevent being banned from the API.Binance is hosted on 4 servers represented by 4 prefixes. If one server is down, you can change it thanks to the Executor.It divides the clients code by 2. Here is an example of every possible type of request: SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); NewOrder request = new NewOrder(&quot;BNBBTC&quot;, OrderType.MARKET, OrderSide.BUY, new BigDecimal(&quot;100&quot;)); try{ NewOrderResponse response = client.newOrder(request).execute(); }catch(ApiException e){ //... }  "},{"title":"ApiCallback​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#apicallback","content":"Every async call to the API made by the RequestExecutor is handled by a functional interface: ApiCallback. The interface has two methods: onResponse : it passes the deserialized data returned by the API.onFailure : it passes an ApiException if something went wrong. The onResponse handler is the default handler. It makes it possible for the async then method of the RequestExecutor to just use a lambda but it is not recommended as you would not be able to handle an ApiException. "},{"title":"WebsocketCallback​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#websocketcallback","content":"Every Websocket client is using an inner WebsocketCallback to handle every connection event: onResponse : Triggered when the server sends dataonFailure : Triggered when the connection fails, deserialization fails, the server has not sent data for a long time.onClosing : Triggered when the connection is closingonClosed : Triggered when the connection is closedonOpen : Triggered when the connection is open "},{"title":"ApiException​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#apiexception","content":"Any exception thrown by Binance4j is an ApiException. It contains a specific error message and an ErrorCode enum linked to an integer error code. These exceptions are thrown by sync methods and passed to the onFailure method of an ApiCallback or WebsocketCallback instance. "},{"title":"Testnet​","type":1,"pageTitle":"Core","url":"docs/1.x/Core#testnet","content":"Clients can connect to Binance Testnet servers From Binance: The testnet is a test environment for Binance Chain network, run by the Binance Chain development community, which is open to developers. The validators on the testnet are from development team. You can connect a node to the testnet by downloading the node binary to use this configuration. More "},{"title":"NFT","type":0,"sectionRef":"#","url":"docs/1.x/NFT","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#description","content":"Binance4j-nft is a Java connector for the NFT endpoints of the Binance REST API. "},{"title":"Installation​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"Get transaction history​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#get-transaction-history","content":"                SyncAsync (lambda)Async (ApiCallback) NFTClient client = new NFTClient(key, secret); NFTTransactionHistoryRequest request = new NFTTransactionHistoryRequest(NFTOrderType.PURCHASE_ORDER); try{ NFTTransactionHistory response = client.getTransactions(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get deposit history​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#get-deposit-history","content":"                SyncAsync (lambda)Async (ApiCallback) NFTClient client = new NFTClient(key, secret); try{ NFTDepositHistory response = client.getDeposits().execute(); }catch(ApiException e){ //... }  "},{"title":"Get withdraw history​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#get-withdraw-history","content":"                SyncAsync (lambda)Async (ApiCallback) NFTClient client = new NFTClient(key, secret); try{ NFTWithdrawHistory response = client.getWithdraws().execute(); }catch(ApiException e){ //... }  "},{"title":"Get NFT assets​","type":1,"pageTitle":"NFT","url":"docs/1.x/NFT#get-nft-assets","content":"                SyncAsync (lambda)Async (ApiCallback) NFTClient client = new NFTClient(key, secret); try{ NFTAssetHistory response = client.getAssets().execute(); }catch(ApiException e){ //... }  "},{"title":"Market","type":0,"sectionRef":"#","url":"docs/1.x/Market","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#description","content":"Binance4j-market is a Java connector for the market endpoints of the Binance REST API. "},{"title":"Installation​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"Test connectivity​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#test-connectivity","content":"          SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); try{ client.ping().execute(); }catch(ApiException e){ //... }  "},{"title":"Get server time​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-server-time","content":"             SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); try{ ServerTimeResponse response = client.getServerTime().execute(); }catch(ApiException e){ //... }  "},{"title":"Get exchange info​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-exchange-info","content":"                All symbolsOne symbolMultiple symbols SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); try{ ExchangeInfo response = client.getExchangeInfo().execute(); }catch(ApiException e){ //... }  "},{"title":"Get a symbol's order book​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-a-symbols-order-book","content":"                The term order book refers to an electronic list of buy and sell orders for a specific security or financial instrument organized by price level. An order book lists the number of shares being bid on or offered at each price point, or market depth. It also identifies the market participants behind the buy and sell orders, though some choose to remain anonymous. These lists help traders and also improve market transparency because they provide valuable trading information. Investopedia Default request (limit: 100)Request with limit SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); OrderBookRequest request = new OrderBookRequest(&quot;BNBBTC&quot;); try{ OrderBook response = client.getOrderBook(request).execute(); }catch(ApiException e){ //... }  note The limit will determine the request weight danger The integer value must match one of the OrderBookLimit values or the request will fail "},{"title":"Get recent trades​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-recent-trades","content":"                Default request (limit: 500)Request with max limit SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); TradesRequest request = new TradesRequest(&quot;BNBBTC&quot;); try{ List&lt;TradeHistoryItem&gt; response = client.getTrades(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get historical trades​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-historical-trades","content":"                Default request (limit: 500)Request with max limitFrom specific trade id SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); HistoricalTradesRequest request = new HistoricalTradesRequest(&quot;BNBBTC&quot;); try{ List&lt;TradeHistoryItem&gt; response = client.getHistoricalTrades(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get compressed/aggregate trades List​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-compressedaggregate-trades-list","content":"                Default request (limit: 500)Request with max limitFrom specific idWith start time and end time SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); AggTradeRequest request = new AggTradeRequest(&quot;BNBBTC&quot;); try{ List&lt;AggTrade&gt; response = client.getAggTrades(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get Klines / candles​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-klines--candles","content":"                With CandlestickIntervalWith String intervalWith a limitWith start time and end time SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); KlinesRequest request = new KlinesRequest(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTES); try{ List&lt;CandlestickBar&gt; response = client.getKlines(request).execute(); }catch(ApiException e){ //... }  note Default limit is 500, max is 1000. caution The String interval must correspond to one of the CandlestickInterval else the request will throw an ApiException "},{"title":"Get average price​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-average-price","content":"                SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); AveragePriceRequest request = new AveragePriceRequest(&quot;BNBBTC&quot;); try{ AveragePrice response = client.getAveragePrice(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get 24h ticker statistics​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-24h-ticker-statistics","content":"                One symbolAll symbolsSpecific symbols SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); TickerStatisticsRequest request = new TickerStatisticsRequest(&quot;BNBBTC&quot;); try{ TickerStatistics response = client.get24hTickerStatistics(request).execute(); }catch(ApiException e){ //... }  note Note the difference between TickerStatisticsRequest and TickersStatisticsRequest. The first is for one or all symbols, the other is for specific symbols. "},{"title":"Get price ticker​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-price-ticker","content":"                One symbolAll symbolsSpecific symbols SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); PriceTickerRequest request = new PriceTickerRequest(&quot;BNBBTC&quot;); try{ PriceTicker response = client.getTicker(request).execute(); }catch(ApiException e){ //... }  note Note the difference between PriceTickerRequest and PriceTickersRequest. The first is for one or all symbols, the other is for specific symbols. "},{"title":"Get order book ticker​","type":1,"pageTitle":"Market","url":"docs/1.x/Market#get-order-book-ticker","content":"                One symbolAll symbolsSpecific symbols SyncAsync (lambda)Async (ApiCallback) MarketDataClient client = new MarketDataClient(key, secret); BookTickerRequest request = new BookTickerRequest(&quot;BNBBTC&quot;); try{ BookTicker response = client.getBookTicker(request).execute(); }catch(ApiException e){ //... }  note Note the difference between BookTickerRequest and BookTickersRequest. The first is for one or all symbols, the other is for specific symbols. "},{"title":"Strategy","type":0,"sectionRef":"#","url":"docs/1.x/Strategy","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#description","content":"Binance4j-strategy adds technical analysis for the binance4j ecosystem. "},{"title":"Installation​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#dependencies","content":"binance4j-core : The core of every binance4j artifactbinance4j-vision : Retrieve Binance public databinance4j-websocket : Real-time market streamsLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"Write a strategy​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#write-a-strategy","content":" Binance4j uses ta4j for technical analysis and backtesting. To understand how indicators and rules work, read the library documentation //Every Strategy must extend BaseTradingStrategy public class TwoPeriodRSIStrategy extends BaseTradingStrategy { //This is where we define the rule that will send a BUY signal @Override public Rule getEntry(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Entry rule // The long-term trend is up when a security is above its 200-period SMA. return new OverIndicatorRule(shortSma, longSma) // Trend .and(new CrossedDownIndicatorRule(rsi, 5)) // Signal 1 .and(new OverIndicatorRule(shortSma, closePrice)); // Signal 2 } //This is where we define the rule that will send a SELL signal @Override public Rule getExit(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Exit rule // The long-term trend is down when a security is below its 200-period SMA. return new UnderIndicatorRule(shortSma, longSma) // Trend .and(new CrossedUpIndicatorRule(rsi, 95)) // Signal 1 .and(new UnderIndicatorRule(shortSma, closePrice)); // Signal 2 } }  "},{"title":"Backtest a strategy​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#backtest-a-strategy","content":"    Use an external candlestickUse binance-vision // Let's get some public data with the vision SpotClient List&lt;CandlestickBar&gt; bars = new SpotClient() .getKlines(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;) .getData(); //We instantiate the strategy TwoPeriodRSIStrategy strategy = new TwoPeriodRSIStrategy(); //We run the backtest on the series BackTestResult result = strategy.backTest(bars, CandlestickInterval.FIVE_MINUTES);  "},{"title":"Live trade​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#live-trade","content":"    Live trading uses binance4j-websocket to get real-time klines data TwoPeriodRSIStrategy strategy = new TwoPeriodRSIStrategy(); //The stream callback StrategyCallback callback = new StrategyCallback(); //Stream is closed callback.onClosed(websocketCloseObject -&gt; { //... }); //Stream is closing callback.onClosing(WebsocketCloseObject -&gt; { //... }); //Stream is open callback.onOpen(response -&gt; { //... }); //connection failed/reading data failed/ping failed callback.onFailure(apiException -&gt; { //... }); //BUY signal (only called on final bar of interval) callback.onEnter(series -&gt; { //... }); //SELL signal (only called on final bar of interval) callback.onExit(series-&gt; { //... }); //every tick callback.onMessage(symbolBar -&gt; { //... }); // We set the inner BarSeries size. Default is 500. strategy.setMaximumBarCount(200); //We start live trading WebsocketClient wsClient = strategy.watch(&quot;BNBBTC&quot;, CandlestickInterval.ONE_MINUTE, callback); //We stop live trading strategy.unwatch();  "},{"title":"Watch multiple symbols​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#watch-multiple-symbols","content":"A strategy can watch multiple symbols at the same time. Just use a string with symbols separated by a coma: WebsocketClient wsClient = strategy.watch(&quot;BNBBTC,BTCBUSD,SHIBBUSD&quot;, CandlestickInterval.ONE_MINUTE, callback);  or with a collection: WebsocketClient wsClient = strategy.watch(List.of(&quot;BNBBTC&quot;,&quot;BTCBUSD&quot;,&quot;SHIBBUSD&quot;), CandlestickInterval.ONE_MINUTE, callback);  The strategy will create a BarSeries instance for every symbol. To know the symbol of the series returned by onEnter and onExit, do as follow: callback.onEnter(series -&gt; { series.getName(); // returns the symbol }); callback.onExit(series-&gt; { series.getName(); // returns the symbol });  To know the symbol of the bar returned by onMessage, do as follow: //every tick callback.onMessage(symbolBar -&gt; { symbolBar.getSymbol(); // returns the symbol });  "},{"title":"Get strategy position over a candlestick​","type":1,"pageTitle":"Strategy","url":"docs/1.x/Strategy#get-strategy-position-over-a-candlestick","content":"The strategy can also give its trading position over the bars. // Let's get some public data with the vision SpotClient List&lt;CandlestickBar&gt; bars = new SpotClient() .getKlines(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;) .getData(); // We instantiate the strategy TwoPeriodRSIStrategy strategy = new TwoPeriodRSIStrategy(); // Here we get the position of the strategy on the last bar of the series boolean shouldEnter = strategy.shouldEnter(bars, CandlestickInterval.FIVE_MINUTES); boolean shouldExit = strategy.shouldExit(bars, CandlestickInterval.FIVE_MINUTES); // Here we get the position of the strategy on the 6th bar of the series boolean shouldEnter = strategy.shouldEnter(bars, CandlestickInterval.FIVE_MINUTES, 5); boolean shouldExit = strategy.shouldExit(bars, CandlestickInterval.FIVE_MINUTES, 5);  The CandlestickBar list will be converted at every method call. To prevent useless computation, you can convert the list into a BarSeries before giving it to the methods. // Let's get some public data with the vision SpotClient List&lt;CandlestickBar&gt; bars = new SpotClient() .getKlines(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;) .getData(); // We convert the bars into a BarSeries BarSeries series = BarSeriesService.convert(bars, CandlestickInterval.FIVE_MINUTES); //We instantiate the strategy TwoPeriodRSIStrategy strategy = new TwoPeriodRSIStrategy(); // Here we get the position of the strategy on the last bar of the series boolean shouldEnter = strategy.shouldEnter(series); boolean shouldExit = strategy.shouldExit(series); //Here we get the position of the strategy on the 6th bar of the series boolean shouldEnter = strategy.shouldEnter(series, 5); boolean shouldExit = strategy.shouldExit(series, 5);  "},{"title":"Spot","type":0,"sectionRef":"#","url":"docs/1.x/Spot","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#description","content":"Binance4j-spot is a Java connector for the SPOT endpoints of the Binance REST API. "},{"title":"Installation​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"Send an order​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#send-an-order","content":"                Sends a trade order for execution. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); NewOrder request = new NewOrder(&quot;BNBBTC&quot;, OrderType.MARKET, OrderSide.BUY, new BigDecimal(&quot;100&quot;)); try{ NewOrderResponse response = client.newOrder(request).execute(); }catch(ApiException e){ //... }  Here we executed a MARKET order to buy 100 BNB with BTC "},{"title":"NewOrder static methods​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#neworder-static-methods","content":" The NewOrder class offers static methods to generate NewOrder instances. MARKET orderLIMIT orderQUOTE order Buy orderSell order NewOrder newOrder = NewOrder.buyMarket(&quot;BNBBTC&quot;, new BigDecimal(100));  "},{"title":"Test new order​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#test-new-order","content":"             Tests the trade order without executing it. Works like the newOrder method. The request returns nothing but will throw an ApiException if it fails. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); NewOrder request = new NewOrder(&quot;BNBBTC&quot;, OrderType.MARKET, OrderSide.BUY, new BigDecimal(&quot;100&quot;)); try{ client.newOrderTest(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Cancel order​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#cancel-order","content":"                Cancels an active order. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); CancelOrderRequest request = new CancelOrderRequest(&quot;BNBBTC&quot;, 56935218L); try{ CancelOrderResponse response = client.cancelOrder(request).execute(); }catch(ApiException e){ //... }  Here we canceled the order on BNB/BTC with the 56935218L id "},{"title":"Cancel all open orders​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#cancel-all-open-orders","content":"                Cancels all active orders on a symbol. This includes OCO orders. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); CancelOpenOrdersRequest request = new CancelOpenOrdersRequest(&quot;BNBBTC&quot;); try{ List&lt;CancelOrderResponse&gt; response = client.cancelOpenOrders(request).execute(); }catch(ApiException e){ //... }  Here we canceled all open orders on BNB/BTC "},{"title":"Get order status​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-order-status","content":"                Check an order's status. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); OrderStatusRequest request = new OrderStatusRequest(&quot;BNBBTC&quot;, 65293729L); try{ OrderInfo response = client.getOrderStatus(request).execute(); }catch(ApiException e){ //... }  he we got the status of order on BNB/BTC with id 65293729 "},{"title":"Get open orders​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-open-orders","content":"                Get all open orders on a symbol. Careful when accessing this with no symbol. All open ordersSpecific pair SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); try{ List&lt;OrderInfo&gt; response = client.getOpenOrders().execute(); }catch(ApiException e){ //... }  "},{"title":"Get all orders​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-all-orders","content":"                Get all orders on a symbol. Get last 500 (default)Get last 1000 orders (max) SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); AllOrdersRequest request = new AllOrdersRequest(&quot;BNBBTC&quot;); try{ List&lt;OrderInfo&gt; response = client.getAllOrders(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Send an OCO order​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#send-an-oco-order","content":"                An OCO order is made of two LIMIT orders. The first to execute cancels the other. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); OCOOrder request = new OCOOrder(&quot;BTCBUSD&quot;, OrderSide.BUY, new BigDecimal(1), new BigDecimal(50000), new BigDecimal(51000)); try{ OCOResponse response = client.newOCO(request).execute(); }catch(ApiException e){ //... }  Here we send an order to buy 1 BTC for 50000 BUSD or 51000 BUSD. "},{"title":"Cancel an OCO/order list​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#cancel-an-ocoorder-list","content":"                All OCOwith order list idWith client order id SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); CancelOCORequest request = new CancelOCORequest(&quot;BNBBTC&quot;); try{ List&lt;OCOResponse&gt; response = client.cancelOCO(request).execute(); }catch(ApiException e){ //... }  note Canceling an individual leg will cancel the entire OCO. If both orderListId and listClientOrderID are provided, orderId takes precedence. "},{"title":"Retrieve an OCO order​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#retrieve-an-oco-order","content":"                With client order idWith order list id SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); OCOInfoRequest request = new OCOInfoRequest(&quot;C3wyj4WVEktd7u9aVBRXcN&quot;); try{ OCOInfo response = client.queryOCO(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Retrieve all OCO orders​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#retrieve-all-oco-orders","content":"                last 500 OCO orders (default)last 1000 (max)With order idWith order id and limit SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); try{ List&lt;OCOInfo&gt; response = client.getAllOCO().execute(); }catch(ApiException e){ //... }  "},{"title":"Retrieve open OCO orders​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#retrieve-open-oco-orders","content":"                SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); try{ List&lt;OCOInfo&gt; response = client.getOpenOCO().execute(); }catch(ApiException e){ //... }  "},{"title":"Get SPOT account infos​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-spot-account-infos","content":"                SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); try{ Account response = client.getAccount().execute(); }catch(ApiException e){ //... }  "},{"title":"Get your trades for a symbol​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-your-trades-for-a-symbol","content":"                Get last 500 (default)Get last 1000 orders (max) SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); MyTradesRequest request = new MyTradesRequest(&quot;BNBBTC&quot;); try{ List&lt;Trade&gt; response = client.getMyTrades(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get order count​","type":1,"pageTitle":"Spot","url":"docs/1.x/Spot#get-order-count","content":"                Displays the user's current order count usage for all intervals. May be useful when rate limiting. SyncAsync (lambda)Async (ApiCallback) SpotClient client = new SpotClient(key, secret); try{ List&lt;OrderCount&gt; response = client.getOrderCount().execute(); }catch(ApiException e){ //... }  "},{"title":"Vision","type":0,"sectionRef":"#","url":"docs/1.x/Vision","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#description","content":"Binance4j-vision is a Java connector for the public data endpoints of the Binance REST API. "},{"title":"Installation​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#installation","content":""},{"title":"Dependencies​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"SPOT endpoints​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#spot-endpoints","content":""},{"title":"Get klines​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#get-klines","content":"       ZippedIn a CSV format / 2D ListDeserializedGet Checksum MonthlyDaily Synchronous requestAsynchronous request with lambdaAsynchronous request with ApiCallback SpotClient client = new SpotClient(); try{ ZipInputStream response = client.getKlines(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTE, &quot;2022&quot;, &quot;01&quot;).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get trades​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#get-trades","content":"       ZippedIn a CSV format / 2D ListDeserializedGet Checksum MonthlyDaily Synchronous requestAsynchronous request with lambdaAsynchronous request with ApiCallback SpotClient client = new SpotClient(); try{ ZipInputStream response = client.getTrades(&quot;BNBBTC&quot;, &quot;2022&quot;, &quot;01&quot;).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get aggregate trades​","type":1,"pageTitle":"Vision","url":"docs/1.x/Vision#get-aggregate-trades","content":"       ZippedIn a CSV format / 2D ListDeserializedGet Checksum MonthlyDaily Synchronous requestAsynchronous request with lambdaAsynchronous request with ApiCallback SpotClient client = new SpotClient(); try{ ZipInputStream response = client.getAggTrades(&quot;BNBBTC&quot;, &quot;2022&quot;, &quot;01&quot;).getZip(); }catch(ApiException e){ //... }  "},{"title":"Websocket","type":0,"sectionRef":"#","url":"docs/1.x/Websocket","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#description","content":"Binance4j-websocket is a set of Java connectors for the Binance Websocket API. "},{"title":"Installation​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urlsRxJava : asynchronous and event-based programs by using observable sequences. "},{"title":"How does it work?​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#how-does-it-work","content":" The goal of a websocket client is to receive real time data from the Binance API through a persistent, bi-directional stream. This can be market or user/balance data. Every client share the same methods as they inherit from the WebsocketClient class. "},{"title":"Event handlers​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#event-handlers","content":"//The connection with the server is opened. client.onOpen(response -&gt; { // ... }); //The connection with the server is closing. client.onClosing(cb -&gt; { // ... }); //The connection with the server is closed. client.onClosed(cb -&gt; { // ... }); //Connection failed, deserialization failed, the server has not sent data for a long time (timeout) client.onFailure(cb -&gt; { // ... }); //The server pushed data client.onMessage(cb -&gt; { // ... });  "},{"title":"Open/Close the stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#openclose-the-stream","content":"//When the connection will open, the `onOpen` handler will be called. client.open(); //Before closing, the `onClosing` handler will be called, then `onClosed` once the connection is closed. client.close();  "},{"title":"Stream lifespan​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#stream-lifespan","content":"From Binance documentation: A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark. The websocket server will send a ping frame every 3 minutes. If the websocket server does not receive a pong frame back from the connection within a 10 minute period, the connection will be disconnected. Unsolicited pong frames are allowed. Ping the server​ Websocket clients automatically ping the server every 3 minutes. You don't need to do anything! But if you want to change that interval, just call: client.setPingInterval(java.time.Duration)  caution The stream must be closed or this won't work. If you need to change this interval, close and reopen the stream. Ping the server back​ Again, websocket clients automatically pings back. You don't need to do anything! Reconnect after a disconnection​ Every websocket client is by default configured to automatically reconnect if the stream is closed by the server. If you don't like this behaviour, just call: client.setKeepAlive(false);  Next time the client is disconnected, it won't try to reconnect. Reconnect after a connection failure​ Every websocket client is by default configured to automatically reconnect after a connection failure. If you don't like this behaviour, just call: client.retryOnConnectionFailure(false);  caution The stream must be closed or this won't work. If you need to change this interval, close and reopen the stream. Reconnect after no response for some time​ It can happen that after some time, the server stops sending data to the client. Every websocket client is by default configured to automatically disconnect and reconnect after a not receiving data for some time (3 minutes by default). To change this interval call: client.setNoResponseTimeout(time.Duration);  caution The stream must be closed or this won't work. If you need to change this interval, close and reopen the stream. Since Binance recommends a 30 minutes interval, i wouldn't recommend to change this value. "},{"title":"Available Websocket clients​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#available-websocket-clients","content":""},{"title":"Individual Symbol Ticker Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#individual-symbol-ticker-streams","content":"    Handles 24hr rolling window ticker statistics for a single symbol. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketTickerClient client = new WebsocketTickerClient(&quot;BNBBTC&quot;);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"Individual Symbol Mini Ticker Stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#individual-symbol-mini-ticker-stream","content":"    24hr rolling window mini-ticker statistics. caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketMiniTickerClient client = new WebsocketMiniTickerClient(&quot;BNBBTC&quot;);  "},{"title":"All Market Tickers Stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#all-market-tickers-stream","content":"    24hr rolling window ticker statistics for all symbols that changed. WebsocketAllTickersClient client = new WebsocketAllTickersClient();  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"All Market Mini Tickers Stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#all-market-mini-tickers-stream","content":"    24hr rolling window mini-ticker statistics for all symbols that changed. WebsocketAllMiniTickersClient client = new WebsocketAllMiniTickersClient();  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"Individual Symbol Book Ticker Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#individual-symbol-book-ticker-streams","content":"    Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketBookTickerClient client = new WebsocketBookTickerClient(&quot;BNBBTC&quot;);  "},{"title":"All Book Tickers Stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#all-book-tickers-stream","content":"    Pushes any update to the best bid or ask's price or quantity in real-time for all symbols. WebsocketAllBookTickersClient client = new WebsocketAllBookTickersClient();  "},{"title":"Kline/Candlestick Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#klinecandlestick-streams","content":"    The Kline/Candlestick Stream push updates to the current klines/candlestick every second. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketCandlestickClient client = new WebsocketCandlestickClient(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTE);  "},{"title":"Diff. Depth Stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#diff-depth-stream","content":"    Order book price and quantity depth updates used to locally manage an order book. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketDepthClient client = new WebsocketDepthClient(&quot;BNBBTC&quot;);  "},{"title":"Partial Book Depth Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#partial-book-depth-streams","content":"    Top bids and asks, Valid are 5, 10, or 20. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketMiniDepthClient client = new WebsocketMiniDepthClient(&quot;BNBBTC&quot;);  "},{"title":"Trade Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#trade-streams","content":"    The Trade Streams push raw trade information; each trade has a unique buyer and seller. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketTradeClient client = new WebsocketTradeClient(&quot;BNBBTC&quot;);  "},{"title":"Aggregate Trade Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#aggregate-trade-streams","content":"    The Aggregate Trade Streams push trade information that is aggregated for a single taker order. One symbolMultiple symbols (String)Multiple symbols (List) WebsocketAggTradeClient client = new WebsocketAggTradeClient(&quot;BNBBTC&quot;);  "},{"title":"User Data Streams​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#user-data-streams","content":"    The User Data Streams push account, balance and order update infos. // Instantiate a UserDataClient UserDataClient userDataClient = new UserDataClient(key,secret); // instantiate the ws client WebsocketUserDataClient client = new WebsocketUserDataClient(userDataClient);  Account Update : outboundAccountPosition is sent any time an account balance has changed and contains the assets that were possibly changed by the event that generated the balance change. Balance Update: Balance Update occurs during the following: Deposits or withdrawals from the accountTransfer of funds between accounts (e.g. Spot to Margin) Order Update: Orders are updated with the executionReport event. Check the Public API Definitions and below for relevant enum definitions. Execution types: NEW - The order has been accepted into the engine.CANCELED - The order has been canceled by the user.REPLACED (currently unused)REJECTED - The order has been rejected and was not processed. (This is never pushed into the User Data Stream)TRADE - Part of the order or all of the order's quantity has filled.EXPIRED - The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) "},{"title":"Keep the User data Stream open​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#keep-the-user-data-stream-open","content":"From Binance documentation: The stream will close after 60 minutes unless a keepalive is sent. It's recommended to send a ping about every 30 minutes. The WebsocketUserDataClient constructor takes a UserDataCLient instance as parameter. In this way, it will automatically ask a listen key to the API and extends its lifespan by pinging the server every 30 minutes. The interval can be changed by calling: client.setKeepAliveInterval(java.time.Duration);  caution The stream must be closed or this won't work. If you need to change this interval, close and reopen the stream. Since Binance recommends a 30 minutes interval, i wouldn't recommend to change this value. "},{"title":"User data endpoints​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#user-data-endpoints","content":""},{"title":"Start user data stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#start-user-data-stream","content":"          Returns a listen key to open a user data websocket stream. SyncAsync (lambda)Async (ApiCallback) UserDataClient client = new UserDataClient(key, secret); try{ ListenKey response = client.startUserDataStream().execute(); }catch(ApiException e){ //... }  note The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes. "},{"title":"Keep alive user data stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#keep-alive-user-data-stream","content":"          Keepalive a user data stream to prevent a time out. SyncAsync (lambda)Async (ApiCallback) UserDataClient client = new UserDataClient(key, secret); String request = new String(/** listenKey */); try{ client.keepAliveUserDataStream(request).execute(); }catch(ApiException e){ //... }  note User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. "},{"title":"Close out a user data stream​","type":1,"pageTitle":"Websocket","url":"docs/1.x/Websocket#close-out-a-user-data-stream","content":"          SyncAsync (lambda)Async (ApiCallback) UserDataClient client = new UserDataClient(key, secret); String request = new String(/** listenKey */); try{ client.loseUserDataStream(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Changelog","type":0,"sectionRef":"#","url":"docs/2.x/changelog","content":"","keywords":""},{"title":"[2.2.0] - 2022-08-11​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#220---2022-08-11","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#added","content":"all: Every API call returns its own Specific Request containing method, weight and signature info. core: Added FullApiAsyncCallback containing Headers in response. connectors: Added Websocket connectors to Connectors "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#changed","content":"connectors: Seperated REST and Websocket connectors in two seperated classes: RestConnectors and WebsocketConnectors.Deprecated direct access to REST clients in Connectors class. "},{"title":"[2.1.1] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#211---2022-08-09","content":""},{"title":"Fixed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#fixed","content":"binance4j-vision: corrected async calls as defined in 2.1.0 "},{"title":"[2.1.0] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#210---2022-08-09","content":""},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#changed-1","content":"binance4j-spot: Deprecated NewOrderParams in newOrder and newOrderTest. binance4j-core: Deprecated async(ApiCallback). "},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#added-1","content":"binance4j-core: Added async(ApiAsyncCallback). Potential ApiException is passed as second parameter of lambda, making it easier to write than with functional interface. binance4j-spot: Added specific Order Params to newOrder and newOrderTest: LimitOrderMarketOrderMarketQuoteOrderStopLossOrderStopLossLimitOrderTakeProfitOrderTakeProfitLimitOrderLimitMakerOrder "},{"title":"[2.0.6] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#206---2022-08-09","content":""},{"title":"Fixed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#fixed-1","content":"binance4j-core: Fixed params.ToMap() issue. "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#changed-2","content":"binance4j-mining: Changed TimeFrame for Paging in getHashrateResales &amp;&amp; getHashrateResalesDetails binance4j-connectors: portfoliomarginClient() becomesportfolioMarginClient() "},{"title":"[2.0.5] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#205---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#added-2","content":"all Fixed constructors with enumsadded missing properties in DTOs. "},{"title":"[2.0.4] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#204---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#added-3","content":"connectors Added binance4j-convertAdded shortened client getters "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#changed-3","content":"convert Deprecated getters with Client suffix "},{"title":"[2.0.3] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#203---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#added-4","content":"all Added Swagger annotations to payloads "},{"title":"[2.0.2] - 2022-08-06​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#202---2022-08-06","content":""},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/2.x/changelog#changed-4","content":"all Removed empty constructors in payloads "},{"title":"Connectors","type":0,"sectionRef":"#","url":"docs/2.x/connectors/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#description","content":"All REST and Websocket connectors in one place. "},{"title":"Installation​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Instantiation​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#instantiation","content":"The Conectors class is the entry point of every client. It receives the API keys at instantiation. Connectors connectors = new Connectors(key, secret);  "},{"title":"REST connectors​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#rest-connectors","content":""},{"title":"Calling a client​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#calling-a-client","content":"Clients are singletons and are lazy loaded, meaning it will be instantiated on demand and will then always return the same instance of the client. // First call, the client is instantiated. connectors.rest().market().getServerTime().sync(); // Second call, the same instance is returned. connectors.rest().market().getBookTicker().sync();  "},{"title":"Updating the API keys​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#updating-the-api-keys","content":"Every time you call a client, it will check if its keys are equal to the container keys and update them if not. This feature is useful if you manage multiple API keys. //Updating keys in the container connectors.rest().updateKeys(key,secret); //keys have changed, they are updated in the client when it is called connectors.rest().spot(); //keys haven't changed, nothing happens connectors.rest().spot();  "},{"title":"Websocket connectors​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#websocket-connectors","content":"Like REST clients, Websoket clients are Singletons. "},{"title":"Clients watching specific symbols​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#clients-watching-specific-symbols","content":"Every instance will be attached to it's symbol(s). // First call, the client is instantiated. connectors.ws().bookTicker(&quot;BNBBTC,BTCBUSD,CAKEBUSD&quot;, callback).open(); // To get the client, call it by its symbol. Every client is wrapped by an Optional object. Optional&lt;WebsocketBookTickerClient&gt; client = connectors.ws().bookTicker(&quot;BNBBTC,BTCBUSD,CAKEBUSD&quot;); //Check if client is not null and close it if(client.isPresent()){ client.get().close(); }  note Read more about Websocket client Callbacks caution Defining a new client on the same symbols will overwrite the previous one. "},{"title":"Clients watching all symbols​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#clients-watching-all-symbols","content":"Clients watching all symbols are called without argument: connectors.ws().allBookTickers(callback).open(); connectors.ws().allBookTickers().get();  "},{"title":"User data client​","type":1,"pageTitle":"Connectors","url":"docs/2.x/connectors/#user-data-client","content":"User data client is linked by its ListenKey: WebsocketUserDataClient client = connectors.ws().user(callback); String key = client.getListenKey(); client.open(); connectors.ws().user(key).get();  "},{"title":"Core","type":0,"sectionRef":"#","url":"docs/2.x/core/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#description","content":"Binance4j-core is the core module of the binance4j ecosystem. "},{"title":"Installation​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Rest client​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#rest-client","content":"Every REST client needs an API key and a secret key when instanciated. Client new instance MarketClient client = new MarketClient(key, secret);  "},{"title":"Request​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#request","content":"The code above won't call the API. It returns an instance of a Request that can make a synchronous or asynchronous call. SyncAsync try{ List&lt;Candle&gt; res = client.getKlines(params).sync(); }catch(ApiException e){ //... }  "},{"title":"Handling exceptions​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#handling-exceptions","content":"As you can see in the example above, all exceptions are handled with ApiException. Synchronous calls will throw an ApiException and asynchronous calls will pass the exception as the second parameter. "},{"title":"Params and Payload types​","type":1,"pageTitle":"Core","url":"docs/2.x/core/#params-and-payload-types","content":"Every request param and payload are Records. Records are immutable objects introduced in JDK 14. This is a major update compared to v1 where values could be modified. It should be considered bad practice to modify data sent by the API. Using Record helped reduce boilerplate code and get ride of third party Lombok. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/","content":"Endpoints","keywords":""},{"title":"Wallet","type":0,"sectionRef":"#","url":"docs/1.x/Wallet","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#description","content":"Binance4j-wallet is a Java connector for the wallet enpoints of the Binance REST API. "},{"title":"Installation​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Dependencies​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#dependencies","content":"binance4j-core : The core of every binance4j artifactLombok : Prevent boilerplate code.OkHttp : HTTP &amp;&amp; Websocket clientsRetrofit : Map API endpoints with annotations.Jackson : Payload deserializationApache Common Codecs : Encode/decode urls "},{"title":"Get system status​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-system-status","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ SystemStatus response = client.getSystemStatus().execute(); }catch(ApiException e){ //... }  "},{"title":"Get all coins info​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-all-coins-info","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ List&lt;CoinInformation&gt; response = client.getAllCoinsInfo().execute(); }catch(ApiException e){ //... }  "},{"title":"Get Account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-account-snapshot","content":"                   SPOTMARGINFUTURES SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ SpotAccountSnapshotResponse response = client.getSpotAccountSnapshot().execute(); }catch(ApiException e){ //... }  "},{"title":"Enable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#enable-fast-withdraw-switch","content":"             Enables fast withdraw switch under your account. You need to enable trade option for the api key which requests this endpoint. When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee. SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ client.enableFastWithdrawSwitch().execute(); }catch(ApiException e){ //... }  "},{"title":"Disable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#disable-fast-withdraw-switch","content":"             Disables fast withdraw switch under your account. You need to enable trade option for the api key which requests this endpoint. SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ client.disableFastWithdrawSwitch().execute(); }catch(ApiException e){ //... }  "},{"title":"Withdraw​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#withdraw","content":"                If network not send, return with default network of the coin. You can get network and isDefault in networkList of a coin in the response of getAllCoinsInfo SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); WithdrawRequest request = new WithdrawRequest(new BigDecimal(1), &quot;BTC&quot;, &quot;0x00000000000000&quot;); try{ WithdrawResult response = client.withdraw(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get deposit history​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-deposit-history","content":"                Fetches the deposit history of one or multiple coins. All coinsSpecific coinBy status (DepositStatus)By status (int)By coin and status SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ List&lt;DepositHistory&gt; response = client.getDepositHistory().execute(); }catch(ApiException e){ //... }  note Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days. "},{"title":"Get withdraw history​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-withdraw-history","content":"                Fetches the withdraw history of one or multiple coins. All coinsSpecific coinBy status (WithdrawStatus)By status (int)By coin and status SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ List&lt;WithdrawHistory&gt; response = client.getWithdrawHistory().execute(); }catch(ApiException e){ //... }  note Network may not be in the response for old withdraw. Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days. If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days. If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default. "},{"title":"Get deposit address​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-deposit-address","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); WithdrawRequesDepositAddressRequest request = new WithdrawRequesDepositAddressRequest(&quot;BNB&quot;); try{ DepositAddress response = client.getDepositAddress(request).execute(); }catch(ApiException e){ //... }  note You can get network and isDefault in networkList in the response of getAllCoinsInfo If network is not sent, return with default network of the coin. "},{"title":"Get account status​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-account-status","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ AccountStatus response = client.getAccountstatus().execute(); }catch(ApiException e){ //... }  "},{"title":"Get API trading status​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-api-trading-status","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ ApiTradingStatus response = client.getApiTradingStatus().execute(); }catch(ApiException e){ //... }  "},{"title":"Get dust log​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-dust-log","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ DustLog response = client.getDustLog().execute(); }catch(ApiException e){ //... }  "},{"title":"Do a dust transfer​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#do-a-dust-transfer","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); DustTransferRequest request = new DustTransferRequest(List.of(&quot;BTC&quot;,&quot;SHIB&quot;,&quot;DOGE&quot;)); try{ DustTransferResponse response = client.dustTransfer(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get asset dividend record​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-asset-dividend-record","content":"                Last 20 (default)Specific coin last 20Last 500 records SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ AssetDividendRecord response = client.getAssetDividendRecord().execute(); }catch(ApiException e){ //... }  "},{"title":"Get asset detail​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-asset-detail","content":"                Get the details of all assets supported by Binance All assetsOne asset SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ Map&lt;String, AssetDetail&gt; response = client.getAssetDetail().execute(); }catch(ApiException e){ //... }  "},{"title":"Get trade fee​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-trade-fee","content":"                All pairsOne pair SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ List&lt;TradeFee&gt; response = client.getTradeFee().execute(); }catch(ApiException e){ //... }  "},{"title":"Make a universal transfer​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#make-a-universal-transfer","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); WalletTransferRequest request = new WalletTransferRequest(new BigDecimal(&quot;100&quot;), &quot;BNB&quot;, WalletTransferType.MAIN_MARGIN); try{ WalletTransferResponse response = client.transfer(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get transfer history​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-transfer-history","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); WalletTransferHistoryRequest request = new WalletTransferHistoryRequest(WalletTransferType.MAIN_MARGIN); try{ WalletTransferHistory response = client.getTransferHistory(request).execute(); }catch(ApiException e){ //... }  "},{"title":"Get funding asset​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-funding-asset","content":"                Fetches the funding wallet asset balance Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token All balancesSpecificSAdd BTC valuation SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ List&lt;FundingAsset&gt; response = client.getFundingWallet().execute(); }catch(ApiException e){ //... }  "},{"title":"Get API permissions​","type":1,"pageTitle":"Wallet","url":"docs/1.x/Wallet#get-api-permissions","content":"                SyncAsync (lambda)Async (ApiCallback) WalletClient client = new WalletClient(key, secret); try{ ApiPermissions response = client.getApiPermissions().execute(); }catch(ApiException e){ //... }  "},{"title":"C2C","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/c2c","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"C2C","url":"docs/2.x/endpoints/c2c#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"C2C","url":"docs/2.x/endpoints/c2c#client-instantiation","content":"BLVTClient client = new BLVTClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"C2C","url":"docs/2.x/endpoints/c2c#features","content":""},{"title":"Get trades​","type":1,"pageTitle":"C2C","url":"docs/2.x/endpoints/c2c#get-trades","content":"Purchases (Enum)Sales (String) SyncAsync try{ TradeHistory res = client.getTrades(new TradeHistoryParams(TradeType.BUY)).sync(); }catch(ApiException e){ //... }  "},{"title":"BLVT","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/blvt","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#client-instantiation","content":"BLVTClient client = new BLVTClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#features","content":""},{"title":"Get token info​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#get-token-info","content":"All tokensOne token SyncAsync try{ List&lt;Token&gt; res = client.getTokenInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get subscriptions​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#get-subscriptions","content":"All tokensSpecific tokenFramed results SyncAsync try{ SubscriptionResponse res = client.getSubscriptions().sync(); }catch(ApiException e){ //... }  "},{"title":"Get redemptions​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#get-redemptions","content":"All tokensSpecific tokenFramed results SyncAsync try{ List&lt;Redemption&gt; res = client.getRedemptions().sync(); }catch(ApiException e){ //... }  "},{"title":"Get user limit info​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#get-user-limit-info","content":"All tokensOne token SyncAsync try{ List&lt;LimitInfo&gt; res = client.getLimitInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#redeem","content":"SyncAsync try{ RedemptionResponse res = client.redeem(new RedemptionParams(tokenName, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Subscribe​","type":1,"pageTitle":"BLVT","url":"docs/2.x/endpoints/blvt#subscribe","content":"SyncAsync try{ SubscriptionResponse res = client.subscribe(new SubscriptionParams(tokenName, cost)).sync(); }catch(ApiException e){ //... }  "},{"title":"Convert","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/convert","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Convert","url":"docs/2.x/endpoints/convert#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Convert","url":"docs/2.x/endpoints/convert#client-instantiation","content":"ConvertClient client = new ConvertClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Convert","url":"docs/2.x/endpoints/convert#features","content":""},{"title":"Get conversions​","type":1,"pageTitle":"Convert","url":"docs/2.x/endpoints/convert#get-conversions","content":" SyncAsync try{ ConversionHistory res = client.getConversions(new TimeFrame(startTime, endTime))).sync(); }catch(ApiException e){ //... }  "},{"title":"Fiat","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/fiat","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Fiat","url":"docs/2.x/endpoints/fiat#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Fiat","url":"docs/2.x/endpoints/fiat#client-instantiation","content":"FiatClient client = new FiatClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Fiat","url":"docs/2.x/endpoints/fiat#features","content":""},{"title":"Get payments​","type":1,"pageTitle":"Fiat","url":"docs/2.x/endpoints/fiat#get-payments","content":"SalesPurchases (paginated) SyncAsync try{ PaymentHistory res = client.getPayments(new PaymentParams(PaymentType.SELL)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Transactions​","type":1,"pageTitle":"Fiat","url":"docs/2.x/endpoints/fiat#get-transactions","content":"WithdrawsDeposits (paginated) SyncAsync try{ TransactionHistory res = client.getTransactions(new TransactionParams(TransactionType.WITHDRAW)).sync(); }catch(ApiException e){ //... }  "},{"title":"Loan","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/loan","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Loan","url":"docs/2.x/endpoints/loan#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Loan","url":"docs/2.x/endpoints/loan#client-instantiation","content":"LoanClient client = new LoanClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Loan","url":"docs/2.x/endpoints/loan#features","content":""},{"title":"Get crypto loans income history.​","type":1,"pageTitle":"Loan","url":"docs/2.x/endpoints/loan#get-crypto-loans-income-history","content":"DefaultFramed SyncAsync try{ List&lt;LoanIncome&gt; res = client.getLoansIncome(new LoanIncomeHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Market","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/market","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#client-instantiation","content":"MarketDataClient client = new MarketDataClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#features","content":""},{"title":"Test connectivity​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#test-connectivity","content":"client.ping().sync();  "},{"title":"Get server time​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-server-time","content":"SyncAsync try{ ServerTimeRespons res = client.getServerTime().sync(); }catch(ApiException e){ //... }  "},{"title":"Get exchange info​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-exchange-info","content":"All symbolsOne symbolMultiple symbols SyncAsync try{ ExchangeInfo res = client.getExchangeInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get a symbol's order book​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-a-symbols-order-book","content":"One symbolWith limit (Enum)With limit (String) SyncAsync try{ OrderBook res = client.getOrderBook(new OrderBookParams(symbol)).sync(); }catch(ApiException e){ //... }  caution The String value must match one of the OrderBookLimit values or the request will fail "},{"title":"Get recent trades​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-recent-trades","content":"One symbolWith limit SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradesParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get historical trades​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-historical-trades","content":"DefaultWith limit SyncAsync try{ List&lt;Trade&gt; res = client.getHistoricalTrades(new TradesParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get compressed/aggregate trades List​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-compressedaggregate-trades-list","content":"DefaultFramed SyncAsync try{ List&lt;AggTrade&gt; res = client.getAggTrades(new AggTradeParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Klines / candles​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-klines--candles","content":"Enum intervalString interval SyncAsync try{ List&lt;Candle&gt; res = client.getKlines(new KlinesParams(symbol, CandlestickInterval.ONE_MINUTE)).sync(); }catch(ApiException e){ //... }  caution The String interval must correspond to one of the CandlestickInterval else the request will throw an ApiException "},{"title":"Get average price​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-average-price","content":"SyncAsync try{ AveragePrice res = client.getAveragePrice(new AveragePriceParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get 24h ticker statistics​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-24h-ticker-statistics","content":"SyncAsync try{ TickerStatistics res = client.get24hTickerStatistics(new TickerStatisticsParams(symbol)).sync(); }catch(ApiException e){ //... }  All symbolsMultiple symbols SyncAsync try{ List&lt;TickersStatistics&gt; res = client.get24hTickerStatistics().sync(); }catch(ApiException e){ //... }  "},{"title":"Get price ticker​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-price-ticker","content":"SyncAsync try{ PriceTicker res = client.getTicker(new PriceTickerParams(symbol)).sync(); }catch(ApiException e){ //... }  All symbolsMultiple symbols SyncAsync try{ List&lt;PriceTicker&gt; res = client.getTicker().sync(); }catch(ApiException e){ //... }  "},{"title":"Get order book ticker​","type":1,"pageTitle":"Market","url":"docs/2.x/endpoints/market#get-order-book-ticker","content":"DefaultWith limit (Enum)With limit (String) SyncAsync try{ OrderBook res = client.getOrderBook(new OrderBookParams(symbol)).sync(); }catch(ApiException e){ //... }  caution The String value must match one of the OrderBookLimit values or the request will fail "},{"title":"Mining","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/mining","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Features​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#features","content":""},{"title":"Get accounts​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-accounts","content":"SyncAsync try{ AccountListResponse res = client.getAccounts(new AccountListParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get algorithms​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-algorithms","content":"SyncAsync try{ AlgorithmsResponse res = client.getAlgorithms().sync(); }catch(ApiException e){ //... }  "},{"title":"Get coins​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-coins","content":"SyncAsync try{ CoinsResponse res = client.getCoins().sync(); }catch(ApiException e){ //... }  "},{"title":"Get statistics​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-statistics","content":"SyncAsync try{ StatisticsResponse res = client.getStatistics(new StatisticsParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Resell hasrate​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#resell-hasrate","content":"SyncAsync try{ HashrateResaleResponse res = client.resellHashrate(new HashrateResaleParams(userName, algo, startTime, endTime, userName, hashrate)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel hashrate resale configuration​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#cancel-hashrate-resale-configuration","content":"SyncAsync try{ HashrateResaleCancellationResponse res = client.cancelHashrateResaleConfiguration(new HashrateResaleCancellationParams(configId, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get earnings list​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-earnings-list","content":"SyncAsync try{ ProfitResponse res = client.getProfits(new ProfitsParams(sha256, userName), new FramedPaging(startTime, endTime, page, limit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get extra bonus list.​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-extra-bonus-list","content":"SyncAsync try{ OtherProfitsResponse res = client.getOtherProfits(new ProfitsParams(sha256, userName), new FramedPaging(startTime, endTime, page, limit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get mining account earning​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-mining-account-earning","content":"DefaultPaginated SyncAsync try{ AccountProfitsResponse res = client.getAccountProfits(new AccountProfitsParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get hashrate resale list​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-hashrate-resale-list","content":"DefaultPaginated SyncAsync try{ HashrateResaleListResponse res = client.getHashrateResales().sync(); }catch(ApiException e){ //... }  "},{"title":"Get hashrate resale detail​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-hashrate-resale-detail","content":"DefaultPaginated SyncAsync try{ HashrateResaleDetailResponse res = client.getHashrateResalesDetails(new HashrateResaleDetailParam(configId, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get miners list​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-miners-list","content":"SyncAsync try{ WorkersResponse res = client.getMiners(new MinersParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get miners details list​","type":1,"pageTitle":"Mining","url":"docs/2.x/endpoints/mining#get-miners-details-list","content":"SyncAsync try{ MinerDetailsResponse res = client.getMinersDetails(new MinerDetailsParams(algo, userName, workerName)).sync(); }catch(ApiException e){ //... }  "},{"title":"NFT","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/nft","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#client-instantiation","content":"PortfolioMarginClient client = new PortfolioMarginClient(key, secret);  "},{"title":"Get NFT Transaction History​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#get-nft-transaction-history","content":"DefaultPaginated SyncAsync try{ TransactionHistory res = client.getTransactions(new TransactionHistoryParams(orderType)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT deposit History​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#get-nft-deposit-history","content":"DefaultPaginated SyncAsync try{ DepositHistory res = client.getDeposits().sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT withdraw History​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#get-nft-withdraw-history","content":"DefaultPaginated SyncAsync try{ WithdrawHistory res = client.getWithdraws().sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT assets​","type":1,"pageTitle":"NFT","url":"docs/2.x/endpoints/nft#get-nft-assets","content":"DefaultPaginated SyncAsync try{ WithdrawHistory res = client.getAssets().sync(); }catch(ApiException e){ //... }  "},{"title":"Pay","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/pay","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Pay","url":"docs/2.x/endpoints/pay#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Pay","url":"docs/2.x/endpoints/pay#client-instantiation","content":"PayClient client = new PayClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Pay","url":"docs/2.x/endpoints/pay#features","content":""},{"title":"Get pay trades​","type":1,"pageTitle":"Pay","url":"docs/2.x/endpoints/pay#get-pay-trades","content":"DefaultFramed SyncAsync try{ TradeHistory res = client.getTrades().sync(); }catch(ApiException e){ //... }  "},{"title":"Portfolio margin endpoint","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/portfolio","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/2.x/endpoints/portfolio#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/2.x/endpoints/portfolio#client-instantiation","content":"PortfolioMarginClient client = new PortfolioMarginClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/2.x/endpoints/portfolio#features","content":""},{"title":"Get account infos​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/2.x/endpoints/portfolio#get-account-infos","content":"SyncAsync try{ AccountInfo res = client.getAccountInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get collateral rate​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/2.x/endpoints/portfolio#get-collateral-rate","content":"SyncAsync try{ List&lt;CollaterateRateInfo&gt; res = client.getCollateralRate().sync(); }catch(ApiException e){ //... }  "},{"title":"Rebate","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/rebate","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Rebate","url":"docs/2.x/endpoints/rebate#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Rebate","url":"docs/2.x/endpoints/rebate#client-instantiation","content":"RebateClient client = new RebateClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Rebate","url":"docs/2.x/endpoints/rebate#features","content":""},{"title":"Get the spot rebate history records​","type":1,"pageTitle":"Rebate","url":"docs/2.x/endpoints/rebate#get-the-spot-rebate-history-records","content":"DefaultFramed SyncAsync try{ SpotRebateHistoryResponse res = client.getSpotRebateHistoryRecords().sync(); }catch(ApiException e){ //... }  "},{"title":"Margin","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/margin","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#client-instantiation","content":"MarginClient client = new MarginClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#features","content":""},{"title":"Execute transfer between spot account and cross margin account​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#execute-transfer-between-spot-account-and-cross-margin-account","content":"Spot to MarginMargin to spot SyncAsync try{ Transaction res = client.transfer(new TransferParams(asset, amount, TransferType.MAIN_TO_MARGIN)).sync(); }catch(ApiException e){ //... }  "},{"title":"Apply for a loan​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#apply-for-a-loan","content":"SyncAsync try{ Transaction res = client.borrow(new BorrowParams(asset, amount, symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Repay loan​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#repay-loan","content":"SyncAsync try{ Transaction res = client.repay(new RepayParams(asset, amount, symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about an asset​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-info-about-an-asset","content":"SyncAsync try{ Asset res = client.getAsset(new AssetParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about all assets​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-info-about-all-assets","content":"SyncAsync try{ List&lt;Asset&gt; res = client.getAllAssets().sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about a cross margin pair​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-info-about-a-cross-margin-pair","content":"SyncAsync try{ CrossSymbol res = client.getCrossMarginPair(new PairParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Gets the price Index of a symbol​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#gets-the-price-index-of-a-symbol","content":"SyncAsync try{ PriceIndex res = client.getPriceIndex(new PriceIndexParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Post a new order​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#post-a-new-order","content":"Market purchaseMarket saleLimit purchaseLimit saleMarket purchase with quote assetMarket sale with quote asset SyncAsync try{ NewOrderRecord res = client.newOrder(NewOrderParams.buy(symbol, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an active order​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#cancel-an-active-order","content":"SyncAsync try{ CancelOrderResponse res = client.cancelOrder(new CancelOrderParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel open orders​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#cancel-open-orders","content":"SyncAsync try{ List&lt;CancelOrderResponse&gt; res = client.cancelOpenOrders(new CancelOpenOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get cross margin transfer history​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-cross-margin-transfer-history","content":"AllBy assetBy transactionFramed and paginated SyncAsync try{ TransferRecords res = client.getTransferHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get loan Record​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-loan-record","content":"By assetBy transactionFramed and paginated SyncAsync try{ LoanRecord res = client.getLoanRecord(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get repay Record​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-repay-record","content":"By assetBy transactionFramed and paginated SyncAsync try{ RepayRecords res = client.getRepayRecord(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get interest history​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-interest-history","content":"By assetBy transactionFramed and paginated SyncAsync try{ InterestHistory res = client.getInterestHistory(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get force liquidation record​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-force-liquidation-record","content":"DefaultFramed and paginated SyncAsync try{ ForceLiquidationRecords res = client.getForceLiquidationRecord(new ForceLiquidationRecordParams(isolatedSymbol)).sync(); }catch(ApiException e){ //... }  note Response in descending order. "},{"title":"Get Margin account details​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-margin-account-details","content":"SyncAsync try{ Account res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get order status.​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-order-status","content":"By symbolBy order id SyncAsync try{ OrderInfo res = client.getOrder(new OrderParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get open orders​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-open-orders","content":"AllBy symbol SyncAsync try{ List&lt;OrderInfo&gt; res = client.getOpenOrders().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all orders​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-all-orders","content":"DefaultFramed SyncAsync try{ List&lt;OrderInfo&gt; res = client.getAllOrders(new AllOrdersParams(symbol, orderId, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send OCO order​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#send-oco-order","content":"SyncAsync try{ NewOCOOrderRecord res = client.newOCO(new NewOCOOrderParams(symbol, OrderSide.BUY, quantity, price, stopPrice, stopPrice, TimeInForce.GTC)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel OCO order​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#cancel-oco-order","content":"By symbolBy order id SyncAsync try{ NewOCOOrderRecord res = client.cancelOCO(new CancelOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get OCO order​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-oco-order","content":"By symbolBy order id SyncAsync try{ OCOOrderRecord res = client.getOCO(new GetOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get all OCO​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-all-oco","content":"By symbolFrom order idFramed SyncAsync try{ List&lt;OCOOrderRecord&gt; res = client.getAllOCO(new GetAllOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"get open OCO​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-open-oco","content":"AllBy symbol SyncAsync try{ List&lt;OCOOrderRecord&gt; res = client.getOpenOCO().sync(); }catch(ApiException e){ //... }  "},{"title":"Get trades​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-trades","content":"By symbolFrom order idFramed SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradeParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query Max Borrow​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#query-max-borrow","content":"SyncAsync try{ MaxBorrowable res = client.getMaxBorrowable(new MaxBorrowable(amount, borrowLimit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query Max Transfer-Out Amount​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#query-max-transfer-out-amount","content":"SyncAsync try{ MaxTransferable res = client.getMaxTransferable(new MaxTransferableParams(asset, isolatedSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Make an isolated margin account transfer​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#make-an-isolated-margin-account-transfer","content":"SyncAsync try{ IsolatedTransferRecords res = client.newIsolatedTransfer(new NewIsolatedTransferParams(asset, symbol, amount, transFrom, transTo)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin transfer history​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-isolated-margin-transfer-history","content":"By symbolBy symbol and isolated assetWith transfer directionFramed and paginated SyncAsync try{ IsolatedTransferRecords res = client.getIsolatedTransferHistory(new IsolatedTransferHistoryParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query isolated margin account info​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#query-isolated-margin-account-info","content":"AllBy symbol SyncAsync try{ IsolatedAccount res = client.getIsolatedAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Enable isolated margin account for a specific symbol​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#enable-isolated-margin-account-for-a-specific-symbol","content":"SyncAsync try{ ToogleAccountResponse res = client.enableIsolatedAccount(new ToogleAccountParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Disable isolated margin account for a specific symbol​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#disable-isolated-margin-account-for-a-specific-symbol","content":"SyncAsync try{ ToogleAccountResponse res = client.disableIsolatedAccount(new ToogleAccountParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query enabled isolated margin account limit​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#query-enabled-isolated-margin-account-limit","content":"SyncAsync try{ IsolatedAccountLimit res = client.getEnabledIsolatedAccountLimit().sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about an isolated symbol​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-info-about-an-isolated-symbol","content":"SyncAsync try{ IsolatedSymbol res = client.getIsolatedSymbol(new PairParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about all the isolated symbols.​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-info-about-all-the-isolated-symbols","content":"SyncAsync try{ List&lt;IsolatedSymbol&gt; res = client.getAllIsolatedSymbols().sync(); }catch(ApiException e){ //... }  "},{"title":"Toggle BNB Burn On Spot Trade And Margin Interest​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#toggle-bnb-burn-on-spot-trade-and-margin-interest","content":"SyncAsync try{ BNBBurnStatus res = client.toggleBNBBurnOnSpotTradeAndMarginInterest(new ToggleBurnParams(spotBNBBurn, interestBNBBurn)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get BNB Burn Status​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-bnb-burn-status","content":"SyncAsync try{ BNBBurnStatus res = client.getBNBBurnStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Query Margin Interest Rate History​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#query-margin-interest-rate-history","content":"By symbolWith VIP level SyncAsync try{ List&lt;InterestRate&gt; res = client.getInterestRateHistory(new InterestRateHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get cross margin fee data​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-cross-margin-fee-data","content":"AllBy coinBy coin and VIP level SyncAsync try{ List&lt;CrossFee&gt; res = client.getMarginFeeData().sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin fee data​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-isolated-margin-fee-data","content":"AllBy coinBy coin and VIP level SyncAsync try{ List&lt;IsolatedFee&gt; res = client.getIsolatedFeeData().sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin tier data​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-isolated-margin-tier-data","content":"All tiersBy tier SyncAsync try{ List&lt;IsolatedTierData&gt; res = client.getIsolatedMarginTierData(new IsolatedTierDataParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get order rate limit​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-order-rate-limit","content":"AllBy isolated symbol SyncAsync try{ List&lt;OrderRateLimit&gt; res = client.getOrderRateLimit().sync(); }catch(ApiException e){ //... }  "},{"title":"Get dust log (conversions into BNB of dust assets)​","type":1,"pageTitle":"Margin","url":"docs/2.x/endpoints/margin#get-dust-log-conversions-into-bnb-of-dust-assets","content":"AllFramed SyncAsync try{ DustLogRecord res = client.getDustLog().sync(); }catch(ApiException e){ //... }  "},{"title":"Savings endpoint","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/savings","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#client-instantiation","content":"SavingsClient client = new SavingsClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#features","content":""},{"title":"Get flexible product list.​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-flexible-product-list","content":"DefaultWith statusFeaturedPaginated SyncAsync try{ FlexibleProduct res = client.getFlexibleProducts().sync(); }catch(ApiException e){ //... }  "},{"title":"Get left daily purchase quota of flexible product​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-left-daily-purchase-quota-of-flexible-product","content":"SyncAsync try{ PurchaseQuota res = client.getLeftDailyFlexiblePurchaseQuota(new PurchaseQuotaParams(productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Left Daily Redemption Quota of Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-left-daily-redemption-quota-of-flexible-product","content":"SyncAsync try{ RedemptionQuota res = client.getLeftDailyRedemptionQuota(new RedemptionQuotaParams(productId, ProductType.FAST)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#purchase-flexible-product","content":"SyncAsync try{ PurchaseResponse res = client.purchaseFlexible(new FlexiblePurchaseParams(productId, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#redeem-flexible-product","content":"SyncAsync try{ client.redeemFlexible(new RedemptionParams(productId, amount, type)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get flexible product position​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-flexible-product-position","content":"DefaultSpecific asset SyncAsync try{ List&lt;FlexibleProductPosition&gt; res = client.getFlexibleProductPosition().sync(); }catch(ApiException e){ //... }  "},{"title":"Get fixed and activity project list​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-fixed-and-activity-project-list","content":"DefaultPaginatedSorted SyncAsync try{ List&lt;FixedProject&gt; res = client.getFixedProjects(new FixedProjectListParams(type, asset, status)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase fixed project​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#purchase-fixed-project","content":"SyncAsync try{ PurchaseResponse res = client.purchaseFixed(new FixedPurchaseParams(productId, lot)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get fixed/activity project position​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-fixedactivity-project-position","content":"SyncAsync try{ List&lt;FixedProjectPosition&gt; res = client.getFixedProjectPosition(new FixedProjectPositionParams(asset, projectId, status)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get lending account​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-lending-account","content":"SyncAsync try{ LendingAccount res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get purchase record​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-purchase-record","content":"DefaultFramed SyncAsync try{ List&lt;Purchase&gt; res = client.getPurchases(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get redemption record​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-redemption-record","content":"DefaultFramed SyncAsync try{ List&lt;Redemption&gt; res = client.getRedemptions(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get interest record​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#get-interest-record","content":"DefaultFramed SyncAsync try{ List&lt;Interest&gt; res = client.getInterests(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Change fixed/activity position to daily position​","type":1,"pageTitle":"Savings endpoint","url":"docs/2.x/endpoints/savings#change-fixedactivity-position-to-daily-position","content":"SyncAsync try{ PositionChangedResponse res = client.fixedToDailyPosition(new ChangePositionParams(projectId, lot, positionId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Staking","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/staking","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#client-instantiation","content":"StakingClient client = new StakingClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#features","content":""},{"title":"Get products​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#get-products","content":"By Product type By Product type and asset SyncAsync try{ List&lt;Product&gt; res = client.getProducts(new ProductListParams(ProductType.STAKING)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get staking history​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#get-staking-history","content":"DefaultPaginated SyncAsync try{ List&lt;StakingRecord&gt; res = client.getHistory(new HistoryParams(ProductType.STAKING, TransactionType.INTEREST, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get personal left quota of Staking product​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#get-personal-left-quota-of-staking-product","content":"SyncAsync try{ LeftQuota res = client.getLeftQuota(new LeftQuotaParams(ProductType.STAKING, productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Staking product position.​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#get-staking-product-position","content":"StakingFlexible DeFiLocked DeFi SyncAsync try{ List&lt;ProductPosition&gt; res = client.getPosition(new PositionParams(ProductType.STAKING)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase Staking product​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#purchase-staking-product","content":"Staking productFlexible DeFi productLocked DeFi product SyncAsync try{ PurchaseResponse res = client.purchase(new PurchaseParams(ProductType.STAKING, productId, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem Staking product​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#redeem-staking-product","content":"Staking productFlexible DeFi productLocked DeFi product SyncAsync try{ RedeemResponse res = client.redeem(new RedeemParams(ProductType.STAKING, productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Set auto staking on Locked Staking or Locked DeFi Staking​","type":1,"pageTitle":"Staking","url":"docs/2.x/endpoints/staking#set-auto-staking-on-locked-staking-or-locked-defi-staking","content":"SyncAsync try{ AutoStakingResponse res = client.setAutoStaking(new AutoStakingParams(ProductType.STAKING, productId, true/false)).sync(); }catch(ApiException e){ //... }  "},{"title":"Spot","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/spot","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#client-instantiation","content":"SpotClient client = new SpotClient(key, secret);  "},{"title":"Testnet client instantiation​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#testnet-client-instantiation","content":"TestnetSpotClient client = new TestnetSpotClient(testnetKey, testnetSecret);  "},{"title":"Features​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#features","content":""},{"title":"Send a Market order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-market-order","content":"BUYSELL SyncAsync try{ NewOrderResponse res = client.newOrder(MarketOrder.buy(symbol, quantity)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Market Quote order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-market-quote-order","content":"BUYSELL SyncAsync try{ NewOrderResponse res = client.newOrder(MarketQuoteOrder.buy(symbol, quoteAssetQty)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Limit order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-limit-order","content":"BUYSELLBUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(LimitOrder.buy(symbol, quantity, price, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Limit Maker order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-limit-maker-order","content":"BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(LimitMakerOrder.buy(symbol, quantity, price)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Stop Loss order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-stop-loss-order","content":"BUY (Stop price)SELL (Stop price)BUY (Trailing delta)SELL (Trailing delta) SyncAsync try{ NewOrderResponse res = client.newOrder(StopLossOrder.buy(symbol, quantity, stopPrice)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Stop Loss Limit order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-stop-loss-limit-order","content":"BUY SELL BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(StopLossOrder.buy(symbol, quantity, price, stopPrice, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Take Profit order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-take-profit-order","content":"BUY (Stop price)SELL (Stop price)BUY (Trailing delta)SELL (Trailing delta) SyncAsync try{ NewOrderResponse res = client.newOrder(TakeProfitOrder.buy(symbol, quantity, stopPrice)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Take Profit Limit order.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-a-take-profit-limit-order","content":"BUY SELL BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(TakeProfitLimitOrder.buy(symbol, quantity, price, stopPrice, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Test an order​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#test-an-order","content":"newOrderTest works like newOrder. SyncAsync try{ client.newOrderTest(MarketOrder.buy(symbol, quantity)).sync(); }catch(ApiException e){ //... }  note buyQuote and sellQuote let you buy the base asset by providing the quote asset amount. "},{"title":"Get open orders​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#get-open-orders","content":"SyncAsync try{ List&lt;OrderInfo&gt; res = client.getOpenOrders().sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel open orders​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#cancel-open-orders","content":"SyncAsync try{ List&lt;CancelOrderResponse&gt; res = client.cancelOpenOrders(new CancelOpenOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Check an order's status​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#check-an-orders-status","content":"SyncAsync try{ OrderInfo res = client.getOrderStatus(new OrderStatusParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an active order​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#cancel-an-active-order","content":"SyncAsync try{ CancelOrderResponse res = client.cancelOrder(new CancelOrderParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Displays the user's current order count usage for all intervals with default request​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#displays-the-users-current-order-count-usage-for-all-intervals-with-default-request","content":"SyncAsync try{ List&lt;OrderCount&gt; res = client.getOrderCount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get current account information​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#get-current-account-information","content":"SyncAsync try{ Account res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all orders on a symbol​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#get-all-orders-on-a-symbol","content":"By symbolBy symbol and order id SyncAsync try{ List&lt;OrderInfo&gt; res = client.getAllOrders(new AllOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get trades for a specific account and symbol.​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#get-trades-for-a-specific-account-and-symbol","content":"From idBy symbol and order id SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradesParams(fromId, symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send in an OCO order​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#send-in-an-oco-order","content":"SyncAsync try{ OCOResponse res = client.newOCO(NewOCOOrderParams(symbol, side, quantity, price, stopPrice, stopLimitPrice, stopLimitTimeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an entire order list​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#cancel-an-entire-order-list","content":"By order idBy client order id SyncAsync try{ OCOResponse res = client.cancelOCO(new CancelOCOParams(symbol, orderListId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Retrieves all OCO​","type":1,"pageTitle":"Spot","url":"docs/2.x/endpoints/spot#retrieves-all-oco","content":"DefaultBy order idFramed SyncAsync try{ List&lt;OCOInfo&gt; res = client.getAllOCO().sync(); }catch(ApiException e){ //... }  "},{"title":"Public data","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/vision","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Public data","url":"docs/2.x/endpoints/vision#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"SPOT endpoints​","type":1,"pageTitle":"Public data","url":"docs/2.x/endpoints/vision#spot-endpoints","content":""},{"title":"Get klines​","type":1,"pageTitle":"Public data","url":"docs/2.x/endpoints/vision#get-klines","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getKlines(symbol, CandlestickInterval, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get trades​","type":1,"pageTitle":"Public data","url":"docs/2.x/endpoints/vision#get-trades","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getTrades(symbol, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get aggregate trades​","type":1,"pageTitle":"Public data","url":"docs/2.x/endpoints/vision#get-aggregate-trades","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getAggTrades(symbol, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Websocket streams","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/websocket","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#description","content":"Binance4j-websocket is a set of Java connectors for the Binance Websocket API. "},{"title":"Installation​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#installation","content":" "},{"title":"Event Callback​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#event-callback","content":"WebsocketCallback is a generic functional interface every WebsocketClient receives at instantiation that will handle the stream events. WebsocketCallback&lt;Candle&gt; callback = new WebsocketCallback&lt;&gt;{ // Data received from the server @Override public void onMessage(Object response) { //... } // Stream is open @Override public void onOpen(Response response) { //... } // Stream issue @Override public void onFailure(ApiException exception) { //... } // Stream is closing @Override public void onClosing(WebsocketCloseObject websocketCloseObject) { //... } // Stream is closed @Override public void onClosed(WebsocketCloseObject websocketCloseObject) { //... } }; //Client instantiation WebsocketCandlestickClient client = new WebsocketCandlestickClient(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTE, callback); //open stream client.open(); //close stream client.close();  "},{"title":"Configuration​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#configuration","content":"Every WebsocketClient possess a WebsocketClientConfiguration accessible through: client.getConfiguration();  Available parameters Parameter\tType\tDescription\tDefaultbaseUrl\tString\tThe stream base url\twss://stream.binance.com:9443/ws pingInterval\tDuration\tThe interval the client will send a ping\t3m keepAlive\tBoolean\tReconnect if stream is closed by server\ttrue maxReconnections\tInteger\tThe number of time the client tries to reconnect\t5 reconnectionInterval\tDuration\tThe reconnection interval\t10s noResponseTimeout\tDuration\tThe time the client waits for a server response before triggering a timeout\t3m noResponseTimeoutMarginError\tDuration\tMargin error added to WebsocketCandleStickClient noResponseTimeout's configuration\t5s disconnectionTimeout\tDuration\tTime after which the client disconnects if stuck in closing state\t5s disconnectionTimeout\tDuration\tTime after which the client will disconnect. If keepAlive is true, will automatically reconnect. Bypasses server unwanted disconnections.\t1d "},{"title":"Available Websocket clients​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#available-websocket-clients","content":""},{"title":"Individual Symbol Ticker Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#individual-symbol-ticker-streams","content":"Handles 24hr rolling window ticker statistics for a single symbol. One symbolMultiple symbols (List) WebsocketTickerClient client = new WebsocketTickerClient(&quot;BNBBTC&quot;, callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"24hr rolling window mini-ticker statistics.​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#24hr-rolling-window-mini-ticker-statistics","content":"One symbolMultiple symbols (List) WebsocketMiniTickerClient client = new WebsocketMiniTickerClient(&quot;BNBBTC&quot;, callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"All Market Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#all-market-tickers-stream","content":"24hr rolling window ticker statistics for all symbols that changed. WebsocketAllTickersClient client = new WebsocketAllTickersClient(callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"All Market Mini Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#all-market-mini-tickers-stream","content":"24hr rolling window mini-ticker statistics for all symbols that changed. WebsocketAllMiniTickersClient client = new WebsocketAllMiniTickersClient(callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"Individual Symbol Book Ticker Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#individual-symbol-book-ticker-streams","content":"Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol. One symbolMultiple symbols (List) WebsocketBookTickerClient client = new WebsocketBookTickerClient(&quot;BNBBTC&quot;, callback);  "},{"title":"All Book Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#all-book-tickers-stream","content":"Pushes any update to the best bid or ask's price or quantity in real-time for all symbols. WebsocketAllBookTickersClient client = new WebsocketAllBookTickersClient(callback);  "},{"title":"Kline/Candlestick Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#klinecandlestick-streams","content":"The Kline/Candlestick Stream push updates to the current klines/candlestick every second. One symbolMultiple symbols (List) WebsocketCandlestickClient client = new WebsocketCandlestickClient(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTE, callback);  "},{"title":"Diff. Depth Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#diff-depth-stream","content":"Order book price and quantity depth updates used to locally manage an order book. One symbolMultiple symbols (List) WebsocketDepthClient client = new WebsocketDepthClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Partial Book Depth Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#partial-book-depth-streams","content":"Top bids and asks, Valid are 5, 10, or 20. One symbolMultiple symbols (List) WebsocketMiniDepthClient client = new WebsocketMiniDepthClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Trade Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#trade-streams","content":"The Trade Streams push raw trade information; each trade has a unique buyer and seller. One symbolMultiple symbols (List) WebsocketTradeClient client = new WebsocketTradeClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Aggregate Trade Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#aggregate-trade-streams","content":"The Aggregate Trade Streams push trade information that is aggregated for a single taker order. One symbolMultiple symbols (List) WebsocketAggTradeClient client = new WebsocketAggTradeClient(&quot;BNBBTC&quot;, callback);  "},{"title":"User Data Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#user-data-streams","content":"The User Data Streams push account, balance and order update infos. // Instantiate a UserDataClient UserDataClient userDataClient = new UserDataClient(key,secret); // instantiate the ws client WebsocketUserDataClient client = new WebsocketUserDataClient(userDataClient, callback);  note The client will automatically keep alive the listen key every 30 minutes as advised by Binance. The client handles thoses events: Account Update : outboundAccountPosition is sent any time an account balance has changed and contains the assets that were possibly changed by the event that generated the balance change. Balance Update: Balance Update occurs during the following: Deposits or withdrawals from the accountTransfer of funds between accounts (e.g. Spot to Margin) Order Update: Orders are updated with the executionReport event. Check the Public API Definitions and below for relevant enum definitions. Execution types: NEW - The order has been accepted into the engine.CANCELED - The order has been canceled by the user.REPLACED (currently unused)REJECTED - The order has been rejected and was not processed. (This is never pushed into the User Data Stream)TRADE - Part of the order or all of the order's quantity has filled.EXPIRED - The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) "},{"title":"User data endpoints​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#user-data-endpoints","content":""},{"title":"Start user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#start-user-data-stream","content":"Returns a listen key to open a user data websocket stream. SyncAsync try{ ListenKey res = client.startUserDataStream().sync(); }catch(ApiException e){ //... }  note The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes. If you're using WebsocketUserDataClient, this is done automatically. "},{"title":"Keep alive user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#keep-alive-user-data-stream","content":"Keepalive a user data stream to prevent a time out. SyncAsync try{ client.keepAliveUserDataStream(listenKey).sync(); }catch(ApiException e){ //... }  note User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. If you're using WebsocketUserDataClient, this is done automatically. "},{"title":"Close out a user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/2.x/endpoints/websocket#close-out-a-user-data-stream","content":"SyncAsync try{ client.closeUserDataStream(listenKey).sync(); }catch(ApiException e){ //... }  "},{"title":"Trading strategies","type":0,"sectionRef":"#","url":"docs/2.x/Strategy/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#description","content":"Binance4j-strategy adds technical analysis for the binance4j ecosystem thanks to ta4j indicators and rules. "},{"title":"Installation​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#installation","content":" "},{"title":"What is a trading strategy?​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#what-is-a-trading-strategy","content":"A trading strategy is a class containing two methods receiveing a BarSeries as an input and returning a trading Rule as an output, the first will send a BUY signal and the other a SELL signal. Every trading strategy must implement the TradingStrategy interface. This is the signature of the interface: public interface TradingStrategy { // The BUY signal Rule entry(BarSeries series); // The SELL signal Rule exit(BarSeries series); }  note Binance4j-strategy uses ta4j for technical analysis, don't hesitate to read their documentation to understand what are indicators and rules. "},{"title":"Creating a trading strategy​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#creating-a-trading-strategy","content":"Here is a trading strategy using the two period RSI indicator: public class TwoPeriodRSIStrategy implements TradingStrategy { @Override public Rule entry(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Entry rule // The long-term trend is up when a security is above its 200-period SMA. return new OverIndicatorRule(shortSma, longSma) // Trend .and(new CrossedDownIndicatorRule(rsi, 5)) // Signal 1 .and(new OverIndicatorRule(shortSma, closePrice)); // Signal 2 } @Override public Rule exit(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Exit rule // The long-term trend is down when a security is below its 200-period SMA. return new UnderIndicatorRule(shortSma, longSma) // Trend .and(new CrossedUpIndicatorRule(rsi, 95)) // Signal 1 .and(new UnderIndicatorRule(shortSma, closePrice)); // Signal 2 } }  "},{"title":"Backtesting a strategy​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#backtesting-a-strategy","content":"Binance4j can backtest a trading strategy in many ways. "},{"title":"With existing data​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#with-existing-data","content":"// Here we get historical klines data from the public data API. List&lt;Candle&gt; bars = new VisionSpotClient().getKlines(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;).getData(); // let's give it to the BackTestService. CandlestickInterval must match. BackTestResult result = BackTestService.backTest(strategy, bars, CandlestickInterval.FIVE_MINUTES); // we can also use a ta4j Barseries instance. Let's convert the existing candles BarSeries series = BarSeriesService.convert(bars,CandlestickInterval.FIVE_MINUTES); BackTestResult result = BackTestService.backTest(strategy, series);  "},{"title":"With inner vision client​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#with-inner-vision-client","content":"The service can automatically use an instance of a VisionSpotClient to collect public data from the Binance API. // The service will automatically use an instance of a VisionClient to get the data from the API BackTestResult result = BackTestService.backTest(strategy, &quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;);  "},{"title":"Get the strategy position other a BarSeries​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#get-the-strategy-position-other-a-barseries","content":"The PositionService service can give us the position of our strategy over a BarSeries instance. //The service will tell us if the strategy sends a BUY signal over the given index on the BarSeries boolean shouldEnter = PositionService.shouldEnter(strategy, series, index); //The service will tell us if the strategy sends a SELL signal over the given index on the BarSeries boolean shouldExit = PositionService.shouldExit(strategy, series, index); //The service will tell us if the strategy sends a BUY signal over the last Bar in the BarSeries boolean shouldEnter = PositionService.shouldEnter(strategy, series); //The service will tell us if the strategy sends a SELL signal over the last Bar in the BarSeries boolean shouldExit = PositionService.shouldExit(strategy, series);  "},{"title":"Live trading​","type":1,"pageTitle":"Trading strategies","url":"docs/2.x/Strategy/#live-trading","content":"In order to handle your strategy signals, you need to implement a StrategyCallback. public class MyStrategyCallback implements StrategyCallback { public MyStrategyCallback() { //... } // Handle BUY signal @Override public void onEnter(BarSeries series) { //... } // Handle SELL signal @Override public void onExit(BarSeries series) { //... } // server sent data @Override public void onMessage(SymbolBar symbolBar) { //... } // Stream is open @Override public void onOpen(Response response) { //... } // Stream is closing @Override public void onClosing(WebsocketCloseObject closeObject) { //... } // Stream is closed @Override public void onClosed(WebsocketCloseObject closeObject) { //... } // Something went wrong @Override public void onFailure(ApiException apiException) { //... } }  Let's instantiate and run a service. //we will use the previous strategy WatchService service = new WatchService(strategy, myStrategyCallback); service.watch(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTE);  When done, stop the service: service.unwatch();  "},{"title":"Wallet","type":0,"sectionRef":"#","url":"docs/2.x/endpoints/wallet","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#client-instantiation","content":"WalletClient client = new WalletClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#features","content":""},{"title":"Get system status​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-system-status","content":"SyncAsync try{ SystemStatus res = client.getSystemStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all coins info​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-all-coins-info","content":"SyncAsync try{ CoinInformation&gt; res = client.getAllCoinsInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Spot account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-spot-account-snapshot","content":"DefaultFramed SyncAsync try{ SpotAccountSnapshotResponse res = client.getSpotAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Margin account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-margin-account-snapshot","content":"DefaultFramed SyncAsync try{ MarginAccountSnapshotResponse res = client.getMarginAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Futures account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-futures-account-snapshot","content":"DefaultFramed SyncAsync try{ FuturesAccountSnapshotResponse res = client.getFuturesAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Enable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#enable-fast-withdraw-switch","content":"SyncAsync try{ client.enableFastWithdrawSwitch().sync(); }catch(ApiException e){ //... }  "},{"title":"Disable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#disable-fast-withdraw-switch","content":"SyncAsync try{ client.disableFastWithdrawSwitch().sync(); }catch(ApiException e){ //... }  "},{"title":"Withdraw​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#withdraw","content":"SyncAsync try{ WithdrawResult res = client.withdraw(new WithdrawParams(amount, asset, address)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get deposit history​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-deposit-history","content":"DefaultBy assetBy statusBothFramed SyncAsync try{ List&lt;DepositHistory&gt; res = client.getDepositHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get withdraw history​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-withdraw-history","content":"DefaultBy statusBy asset and statusBy withdraw order idFramed SyncAsync try{ List&lt;WithdrawHistory&gt; res = client.getWithdrawHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get deposit address​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-deposit-address","content":"DefaultBy coinBy coin and network SyncAsync try{ DepositAddress res = client.getDepositAddress().sync(); }catch(ApiException e){ //... }  "},{"title":"Get account status​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-account-status","content":"SyncAsync try{ AccountStatus res = client.getAccountstatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get API trading status​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-api-trading-status","content":"SyncAsync try{ ApiTradingStatus res = client.getApiTradingStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get dust log​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-dust-log","content":"DefaultFramed SyncAsync try{ DustLog res = client.getDustLog().sync(); }catch(ApiException e){ //... }  "},{"title":"Do a dust transfer​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#do-a-dust-transfer","content":"DefaultMultiple symbols SyncAsync try{ DustTransferResponse res = client.dustTransfer().sync(); }catch(ApiException e){ //... }  "},{"title":"Get asset dividend record​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-asset-dividend-record","content":"DefaultSpecific symbolSpecific symbol framedFramed SyncAsync try{ AssetDividendRecord res = client.getAssetDividendRecord().sync(); }catch(ApiException e){ //... }  "},{"title":"Get asset detail​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-asset-detail","content":"DefaultSpecific symbol SyncAsync try{ Map&lt;String, AssetDetail&gt; res = client.getAssetDetail().sync(); }catch(ApiException e){ //... }  "},{"title":"Get trade fee​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-trade-fee","content":"DefaultSpecific symbol SyncAsync try{ List&lt;TradeFee&gt; res = client.getTradeFee().sync(); }catch(ApiException e){ //... }  "},{"title":"Make a universal transfer​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#make-a-universal-transfer","content":"SyncAsync try{ WalletTransferResponse res = client.transfer(new WalletTransferParams(asset, type, amount, fromSymbol, toSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get transfer history​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-transfer-history","content":"SyncAsync try{ WalletTransferHistory res = client.getTransferHistory(new WalletTransferHistoryParams(type, fromSymbol, toSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get funding asset​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-funding-asset","content":"Fetches the funding wallet asset balance Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token DefaultSpecific asset SyncAsync try{ List&lt;FundingAsset&gt; res = client.getFundingWallet().sync(); }catch(ApiException e){ //... }  "},{"title":"Get API permissions​","type":1,"pageTitle":"Wallet","url":"docs/2.x/endpoints/wallet#get-api-permissions","content":"SyncAsync try{ ApiPermissions res = client.getApiPermissions().sync(); }catch(ApiException e){ //... }  "},{"title":"Changelog","type":0,"sectionRef":"#","url":"docs/changelog","content":"","keywords":""},{"title":"[2.2.0] - 2022-08-11​","type":1,"pageTitle":"Changelog","url":"docs/changelog#220---2022-08-11","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/changelog#added","content":"all: Every API call returns its own Specific Request containing method, weight and signature info. core: Added FullApiAsyncCallback containing Headers in response. connectors: Added Websocket connectors to Connectors "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#changed","content":"connectors: Seperated REST and Websocket connectors in two seperated classes: RestConnectors and WebsocketConnectors.Deprecated direct access to REST clients in Connectors class. "},{"title":"[2.1.1] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/changelog#211---2022-08-09","content":""},{"title":"Fixed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#fixed","content":"binance4j-vision: corrected async calls as defined in 2.1.0 "},{"title":"[2.1.0] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/changelog#210---2022-08-09","content":""},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#changed-1","content":"binance4j-spot: Deprecated NewOrderParams in newOrder and newOrderTest. binance4j-core: Deprecated async(ApiCallback). "},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/changelog#added-1","content":"binance4j-core: Added async(ApiAsyncCallback). Potential ApiException is passed as second parameter of lambda, making it easier to write than with functional interface. binance4j-spot: Added specific Order Params to newOrder and newOrderTest: LimitOrderMarketOrderMarketQuoteOrderStopLossOrderStopLossLimitOrderTakeProfitOrderTakeProfitLimitOrderLimitMakerOrder "},{"title":"[2.0.6] - 2022-08-09​","type":1,"pageTitle":"Changelog","url":"docs/changelog#206---2022-08-09","content":""},{"title":"Fixed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#fixed-1","content":"binance4j-core: Fixed params.ToMap() issue. "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#changed-2","content":"binance4j-mining: Changed TimeFrame for Paging in getHashrateResales &amp;&amp; getHashrateResalesDetails binance4j-connectors: portfoliomarginClient() becomesportfolioMarginClient() "},{"title":"[2.0.5] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/changelog#205---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/changelog#added-2","content":"all Fixed constructors with enumsadded missing properties in DTOs. "},{"title":"[2.0.4] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/changelog#204---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/changelog#added-3","content":"connectors Added binance4j-convertAdded shortened client getters "},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#changed-3","content":"convert Deprecated getters with Client suffix "},{"title":"[2.0.3] - 2022-08-07​","type":1,"pageTitle":"Changelog","url":"docs/changelog#203---2022-08-07","content":""},{"title":"Added​","type":1,"pageTitle":"Changelog","url":"docs/changelog#added-4","content":"all Added Swagger annotations to payloads "},{"title":"[2.0.2] - 2022-08-06​","type":1,"pageTitle":"Changelog","url":"docs/changelog#202---2022-08-06","content":""},{"title":"Changed​","type":1,"pageTitle":"Changelog","url":"docs/changelog#changed-4","content":"all Removed empty constructors in payloads "},{"title":"Connectors","type":0,"sectionRef":"#","url":"docs/connectors/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#description","content":"All REST and Websocket connectors in one place. "},{"title":"Installation​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Instantiation​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#instantiation","content":"The Conectors class is the entry point of every client. It receives the API keys at instantiation. Connectors connectors = new Connectors(key, secret);  "},{"title":"REST connectors​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#rest-connectors","content":""},{"title":"Calling a client​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#calling-a-client","content":"Clients are singletons and are lazy loaded, meaning it will be instantiated on demand and will then always return the same instance of the client. // First call, the client is instantiated. connectors.rest().market().getServerTime().sync(); // Second call, the same instance is returned. connectors.rest().market().getBookTicker().sync();  "},{"title":"Updating the API keys​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#updating-the-api-keys","content":"Every time you call a client, it will check if its keys are equal to the container keys and update them if not. This feature is useful if you manage multiple API keys. //Updating keys in the container connectors.rest().updateKeys(key,secret); //keys have changed, they are updated in the client when it is called connectors.rest().spot(); //keys haven't changed, nothing happens connectors.rest().spot();  "},{"title":"Websocket connectors​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#websocket-connectors","content":"Like REST clients, Websoket clients are Singletons. "},{"title":"Clients watching specific symbols​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#clients-watching-specific-symbols","content":"Every instance will be attached to it's symbol(s). // First call, the client is instantiated. connectors.ws().bookTicker(&quot;BNBBTC,BTCBUSD,CAKEBUSD&quot;, callback).open(); // To get the client, call it by its symbol. Every client is wrapped by an Optional object. Optional&lt;WebsocketBookTickerClient&gt; client = connectors.ws().bookTicker(&quot;BNBBTC,BTCBUSD,CAKEBUSD&quot;); //Check if client is not null and close it if(client.isPresent()){ client.get().close(); }  note Read more about Websocket client Callbacks caution Defining a new client on the same symbols will overwrite the previous one. "},{"title":"Clients watching all symbols​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#clients-watching-all-symbols","content":"Clients watching all symbols are called without argument: connectors.ws().allBookTickers(callback).open(); connectors.ws().allBookTickers().get();  "},{"title":"User data client​","type":1,"pageTitle":"Connectors","url":"docs/connectors/#user-data-client","content":"User data client is linked by its ListenKey: WebsocketUserDataClient client = connectors.ws().user(callback); String key = client.getListenKey(); client.open(); connectors.ws().user(key).get();  "},{"title":"Core","type":0,"sectionRef":"#","url":"docs/core/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Core","url":"docs/core/#description","content":"Binance4j-core is the core module of the binance4j ecosystem. "},{"title":"Installation​","type":1,"pageTitle":"Core","url":"docs/core/#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Rest client​","type":1,"pageTitle":"Core","url":"docs/core/#rest-client","content":"Every REST client needs an API key and a secret key when instanciated. Client new instance MarketClient client = new MarketClient(key, secret);  "},{"title":"Request​","type":1,"pageTitle":"Core","url":"docs/core/#request","content":"The code above won't call the API. It returns an instance of a Request that can make a synchronous or asynchronous call. SyncAsync try{ List&lt;Candle&gt; res = client.getKlines(params).sync(); }catch(ApiException e){ //... }  "},{"title":"Handling exceptions​","type":1,"pageTitle":"Core","url":"docs/core/#handling-exceptions","content":"As you can see in the example above, all exceptions are handled with ApiException. Synchronous calls will throw an ApiException and asynchronous calls will pass the exception as the second parameter. "},{"title":"Params and Payload types​","type":1,"pageTitle":"Core","url":"docs/core/#params-and-payload-types","content":"Every request param and payload are Records. Records are immutable objects introduced in JDK 14. This is a major update compared to v1 where values could be modified. It should be considered bad practice to modify data sent by the API. Using Record helped reduce boilerplate code and get ride of third party Lombok. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/endpoints/","content":"Endpoints","keywords":""},{"title":"C2C","type":0,"sectionRef":"#","url":"docs/endpoints/c2c","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"C2C","url":"docs/endpoints/c2c#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"C2C","url":"docs/endpoints/c2c#client-instantiation","content":"BLVTClient client = new BLVTClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"C2C","url":"docs/endpoints/c2c#features","content":""},{"title":"Get trades​","type":1,"pageTitle":"C2C","url":"docs/endpoints/c2c#get-trades","content":"Purchases (Enum)Sales (String) SyncAsync try{ TradeHistory res = client.getTrades(new TradeHistoryParams(TradeType.BUY)).sync(); }catch(ApiException e){ //... }  "},{"title":"Convert","type":0,"sectionRef":"#","url":"docs/endpoints/convert","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Convert","url":"docs/endpoints/convert#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Convert","url":"docs/endpoints/convert#client-instantiation","content":"ConvertClient client = new ConvertClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Convert","url":"docs/endpoints/convert#features","content":""},{"title":"Get conversions​","type":1,"pageTitle":"Convert","url":"docs/endpoints/convert#get-conversions","content":" SyncAsync try{ ConversionHistory res = client.getConversions(new TimeFrame(startTime, endTime))).sync(); }catch(ApiException e){ //... }  "},{"title":"Fiat","type":0,"sectionRef":"#","url":"docs/endpoints/fiat","content":"","keywords":""},{"title":"BLVT","type":0,"sectionRef":"#","url":"docs/endpoints/blvt","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#client-instantiation","content":"BLVTClient client = new BLVTClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#features","content":""},{"title":"Get token info​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#get-token-info","content":"All tokensOne token SyncAsync try{ List&lt;Token&gt; res = client.getTokenInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get subscriptions​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#get-subscriptions","content":"All tokensSpecific tokenFramed results SyncAsync try{ SubscriptionResponse res = client.getSubscriptions().sync(); }catch(ApiException e){ //... }  "},{"title":"Get redemptions​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#get-redemptions","content":"All tokensSpecific tokenFramed results SyncAsync try{ List&lt;Redemption&gt; res = client.getRedemptions().sync(); }catch(ApiException e){ //... }  "},{"title":"Get user limit info​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#get-user-limit-info","content":"All tokensOne token SyncAsync try{ List&lt;LimitInfo&gt; res = client.getLimitInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#redeem","content":"SyncAsync try{ RedemptionResponse res = client.redeem(new RedemptionParams(tokenName, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Subscribe​","type":1,"pageTitle":"BLVT","url":"docs/endpoints/blvt#subscribe","content":"SyncAsync try{ SubscriptionResponse res = client.subscribe(new SubscriptionParams(tokenName, cost)).sync(); }catch(ApiException e){ //... }  "},{"title":"Installation​","type":1,"pageTitle":"Fiat","url":"docs/endpoints/fiat#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Fiat","url":"docs/endpoints/fiat#client-instantiation","content":"FiatClient client = new FiatClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Fiat","url":"docs/endpoints/fiat#features","content":""},{"title":"Get payments​","type":1,"pageTitle":"Fiat","url":"docs/endpoints/fiat#get-payments","content":"SalesPurchases (paginated) SyncAsync try{ PaymentHistory res = client.getPayments(new PaymentParams(PaymentType.SELL)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Transactions​","type":1,"pageTitle":"Fiat","url":"docs/endpoints/fiat#get-transactions","content":"WithdrawsDeposits (paginated) SyncAsync try{ TransactionHistory res = client.getTransactions(new TransactionParams(TransactionType.WITHDRAW)).sync(); }catch(ApiException e){ //... }  "},{"title":"Loan","type":0,"sectionRef":"#","url":"docs/endpoints/loan","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Loan","url":"docs/endpoints/loan#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Loan","url":"docs/endpoints/loan#client-instantiation","content":"LoanClient client = new LoanClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Loan","url":"docs/endpoints/loan#features","content":""},{"title":"Get crypto loans income history.​","type":1,"pageTitle":"Loan","url":"docs/endpoints/loan#get-crypto-loans-income-history","content":"DefaultFramed SyncAsync try{ List&lt;LoanIncome&gt; res = client.getLoansIncome(new LoanIncomeHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Market","type":0,"sectionRef":"#","url":"docs/endpoints/market","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#client-instantiation","content":"MarketDataClient client = new MarketDataClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#features","content":""},{"title":"Test connectivity​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#test-connectivity","content":"client.ping().sync();  "},{"title":"Get server time​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-server-time","content":"SyncAsync try{ ServerTimeRespons res = client.getServerTime().sync(); }catch(ApiException e){ //... }  "},{"title":"Get exchange info​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-exchange-info","content":"All symbolsOne symbolMultiple symbols SyncAsync try{ ExchangeInfo res = client.getExchangeInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get a symbol's order book​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-a-symbols-order-book","content":"One symbolWith limit (Enum)With limit (String) SyncAsync try{ OrderBook res = client.getOrderBook(new OrderBookParams(symbol)).sync(); }catch(ApiException e){ //... }  caution The String value must match one of the OrderBookLimit values or the request will fail "},{"title":"Get recent trades​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-recent-trades","content":"One symbolWith limit SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradesParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get historical trades​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-historical-trades","content":"DefaultWith limit SyncAsync try{ List&lt;Trade&gt; res = client.getHistoricalTrades(new TradesParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get compressed/aggregate trades List​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-compressedaggregate-trades-list","content":"DefaultFramed SyncAsync try{ List&lt;AggTrade&gt; res = client.getAggTrades(new AggTradeParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Klines / candles​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-klines--candles","content":"Enum intervalString interval SyncAsync try{ List&lt;Candle&gt; res = client.getKlines(new KlinesParams(symbol, CandlestickInterval.ONE_MINUTE)).sync(); }catch(ApiException e){ //... }  caution The String interval must correspond to one of the CandlestickInterval else the request will throw an ApiException "},{"title":"Get average price​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-average-price","content":"SyncAsync try{ AveragePrice res = client.getAveragePrice(new AveragePriceParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get 24h ticker statistics​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-24h-ticker-statistics","content":"SyncAsync try{ TickerStatistics res = client.get24hTickerStatistics(new TickerStatisticsParams(symbol)).sync(); }catch(ApiException e){ //... }  All symbolsMultiple symbols SyncAsync try{ List&lt;TickersStatistics&gt; res = client.get24hTickerStatistics().sync(); }catch(ApiException e){ //... }  "},{"title":"Get price ticker​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-price-ticker","content":"SyncAsync try{ PriceTicker res = client.getTicker(new PriceTickerParams(symbol)).sync(); }catch(ApiException e){ //... }  All symbolsMultiple symbols SyncAsync try{ List&lt;PriceTicker&gt; res = client.getTicker().sync(); }catch(ApiException e){ //... }  "},{"title":"Get order book ticker​","type":1,"pageTitle":"Market","url":"docs/endpoints/market#get-order-book-ticker","content":"DefaultWith limit (Enum)With limit (String) SyncAsync try{ OrderBook res = client.getOrderBook(new OrderBookParams(symbol)).sync(); }catch(ApiException e){ //... }  caution The String value must match one of the OrderBookLimit values or the request will fail "},{"title":"Mining","type":0,"sectionRef":"#","url":"docs/endpoints/mining","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Features​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#features","content":""},{"title":"Get accounts​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-accounts","content":"SyncAsync try{ AccountListResponse res = client.getAccounts(new AccountListParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get algorithms​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-algorithms","content":"SyncAsync try{ AlgorithmsResponse res = client.getAlgorithms().sync(); }catch(ApiException e){ //... }  "},{"title":"Get coins​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-coins","content":"SyncAsync try{ CoinsResponse res = client.getCoins().sync(); }catch(ApiException e){ //... }  "},{"title":"Get statistics​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-statistics","content":"SyncAsync try{ StatisticsResponse res = client.getStatistics(new StatisticsParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Resell hasrate​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#resell-hasrate","content":"SyncAsync try{ HashrateResaleResponse res = client.resellHashrate(new HashrateResaleParams(userName, algo, startTime, endTime, userName, hashrate)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel hashrate resale configuration​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#cancel-hashrate-resale-configuration","content":"SyncAsync try{ HashrateResaleCancellationResponse res = client.cancelHashrateResaleConfiguration(new HashrateResaleCancellationParams(configId, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get earnings list​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-earnings-list","content":"SyncAsync try{ ProfitResponse res = client.getProfits(new ProfitsParams(sha256, userName), new FramedPaging(startTime, endTime, page, limit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get extra bonus list.​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-extra-bonus-list","content":"SyncAsync try{ OtherProfitsResponse res = client.getOtherProfits(new ProfitsParams(sha256, userName), new FramedPaging(startTime, endTime, page, limit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get mining account earning​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-mining-account-earning","content":"DefaultPaginated SyncAsync try{ AccountProfitsResponse res = client.getAccountProfits(new AccountProfitsParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get hashrate resale list​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-hashrate-resale-list","content":"DefaultPaginated SyncAsync try{ HashrateResaleListResponse res = client.getHashrateResales().sync(); }catch(ApiException e){ //... }  "},{"title":"Get hashrate resale detail​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-hashrate-resale-detail","content":"DefaultPaginated SyncAsync try{ HashrateResaleDetailResponse res = client.getHashrateResalesDetails(new HashrateResaleDetailParam(configId, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get miners list​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-miners-list","content":"SyncAsync try{ WorkersResponse res = client.getMiners(new MinersParams(algo, userName)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get miners details list​","type":1,"pageTitle":"Mining","url":"docs/endpoints/mining#get-miners-details-list","content":"SyncAsync try{ MinerDetailsResponse res = client.getMinersDetails(new MinerDetailsParams(algo, userName, workerName)).sync(); }catch(ApiException e){ //... }  "},{"title":"NFT","type":0,"sectionRef":"#","url":"docs/endpoints/nft","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#client-instantiation","content":"PortfolioMarginClient client = new PortfolioMarginClient(key, secret);  "},{"title":"Get NFT Transaction History​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#get-nft-transaction-history","content":"DefaultPaginated SyncAsync try{ TransactionHistory res = client.getTransactions(new TransactionHistoryParams(orderType)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT deposit History​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#get-nft-deposit-history","content":"DefaultPaginated SyncAsync try{ DepositHistory res = client.getDeposits().sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT withdraw History​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#get-nft-withdraw-history","content":"DefaultPaginated SyncAsync try{ WithdrawHistory res = client.getWithdraws().sync(); }catch(ApiException e){ //... }  "},{"title":"Get NFT assets​","type":1,"pageTitle":"NFT","url":"docs/endpoints/nft#get-nft-assets","content":"DefaultPaginated SyncAsync try{ WithdrawHistory res = client.getAssets().sync(); }catch(ApiException e){ //... }  "},{"title":"Pay","type":0,"sectionRef":"#","url":"docs/endpoints/pay","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Pay","url":"docs/endpoints/pay#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Pay","url":"docs/endpoints/pay#client-instantiation","content":"PayClient client = new PayClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Pay","url":"docs/endpoints/pay#features","content":""},{"title":"Get pay trades​","type":1,"pageTitle":"Pay","url":"docs/endpoints/pay#get-pay-trades","content":"DefaultFramed SyncAsync try{ TradeHistory res = client.getTrades().sync(); }catch(ApiException e){ //... }  "},{"title":"Portfolio margin endpoint","type":0,"sectionRef":"#","url":"docs/endpoints/portfolio","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/endpoints/portfolio#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/endpoints/portfolio#client-instantiation","content":"PortfolioMarginClient client = new PortfolioMarginClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/endpoints/portfolio#features","content":""},{"title":"Get account infos​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/endpoints/portfolio#get-account-infos","content":"SyncAsync try{ AccountInfo res = client.getAccountInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get collateral rate​","type":1,"pageTitle":"Portfolio margin endpoint","url":"docs/endpoints/portfolio#get-collateral-rate","content":"SyncAsync try{ List&lt;CollaterateRateInfo&gt; res = client.getCollateralRate().sync(); }catch(ApiException e){ //... }  "},{"title":"Rebate","type":0,"sectionRef":"#","url":"docs/endpoints/rebate","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Rebate","url":"docs/endpoints/rebate#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Rebate","url":"docs/endpoints/rebate#client-instantiation","content":"RebateClient client = new RebateClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Rebate","url":"docs/endpoints/rebate#features","content":""},{"title":"Get the spot rebate history records​","type":1,"pageTitle":"Rebate","url":"docs/endpoints/rebate#get-the-spot-rebate-history-records","content":"DefaultFramed SyncAsync try{ SpotRebateHistoryResponse res = client.getSpotRebateHistoryRecords().sync(); }catch(ApiException e){ //... }  "},{"title":"Margin","type":0,"sectionRef":"#","url":"docs/endpoints/margin","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#client-instantiation","content":"MarginClient client = new MarginClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#features","content":""},{"title":"Execute transfer between spot account and cross margin account​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#execute-transfer-between-spot-account-and-cross-margin-account","content":"Spot to MarginMargin to spot SyncAsync try{ Transaction res = client.transfer(new TransferParams(asset, amount, TransferType.MAIN_TO_MARGIN)).sync(); }catch(ApiException e){ //... }  "},{"title":"Apply for a loan​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#apply-for-a-loan","content":"SyncAsync try{ Transaction res = client.borrow(new BorrowParams(asset, amount, symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Repay loan​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#repay-loan","content":"SyncAsync try{ Transaction res = client.repay(new RepayParams(asset, amount, symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about an asset​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-info-about-an-asset","content":"SyncAsync try{ Asset res = client.getAsset(new AssetParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about all assets​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-info-about-all-assets","content":"SyncAsync try{ List&lt;Asset&gt; res = client.getAllAssets().sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about a cross margin pair​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-info-about-a-cross-margin-pair","content":"SyncAsync try{ CrossSymbol res = client.getCrossMarginPair(new PairParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Gets the price Index of a symbol​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#gets-the-price-index-of-a-symbol","content":"SyncAsync try{ PriceIndex res = client.getPriceIndex(new PriceIndexParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Post a new order​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#post-a-new-order","content":"Market purchaseMarket saleLimit purchaseLimit saleMarket purchase with quote assetMarket sale with quote asset SyncAsync try{ NewOrderRecord res = client.newOrder(NewOrderParams.buy(symbol, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an active order​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#cancel-an-active-order","content":"SyncAsync try{ CancelOrderResponse res = client.cancelOrder(new CancelOrderParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel open orders​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#cancel-open-orders","content":"SyncAsync try{ List&lt;CancelOrderResponse&gt; res = client.cancelOpenOrders(new CancelOpenOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get cross margin transfer history​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-cross-margin-transfer-history","content":"AllBy assetBy transactionFramed and paginated SyncAsync try{ TransferRecords res = client.getTransferHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get loan Record​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-loan-record","content":"By assetBy transactionFramed and paginated SyncAsync try{ LoanRecord res = client.getLoanRecord(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get repay Record​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-repay-record","content":"By assetBy transactionFramed and paginated SyncAsync try{ RepayRecords res = client.getRepayRecord(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get interest history​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-interest-history","content":"By assetBy transactionFramed and paginated SyncAsync try{ InterestHistory res = client.getInterestHistory(new TransactionHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get force liquidation record​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-force-liquidation-record","content":"DefaultFramed and paginated SyncAsync try{ ForceLiquidationRecords res = client.getForceLiquidationRecord(new ForceLiquidationRecordParams(isolatedSymbol)).sync(); }catch(ApiException e){ //... }  note Response in descending order. "},{"title":"Get Margin account details​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-margin-account-details","content":"SyncAsync try{ Account res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get order status.​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-order-status","content":"By symbolBy order id SyncAsync try{ OrderInfo res = client.getOrder(new OrderParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get open orders​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-open-orders","content":"AllBy symbol SyncAsync try{ List&lt;OrderInfo&gt; res = client.getOpenOrders().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all orders​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-all-orders","content":"DefaultFramed SyncAsync try{ List&lt;OrderInfo&gt; res = client.getAllOrders(new AllOrdersParams(symbol, orderId, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send OCO order​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#send-oco-order","content":"SyncAsync try{ NewOCOOrderRecord res = client.newOCO(new NewOCOOrderParams(symbol, OrderSide.BUY, quantity, price, stopPrice, stopPrice, TimeInForce.GTC)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel OCO order​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#cancel-oco-order","content":"By symbolBy order id SyncAsync try{ NewOCOOrderRecord res = client.cancelOCO(new CancelOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get OCO order​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-oco-order","content":"By symbolBy order id SyncAsync try{ OCOOrderRecord res = client.getOCO(new GetOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get all OCO​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-all-oco","content":"By symbolFrom order idFramed SyncAsync try{ List&lt;OCOOrderRecord&gt; res = client.getAllOCO(new GetAllOCOParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"get open OCO​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-open-oco","content":"AllBy symbol SyncAsync try{ List&lt;OCOOrderRecord&gt; res = client.getOpenOCO().sync(); }catch(ApiException e){ //... }  "},{"title":"Get trades​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-trades","content":"By symbolFrom order idFramed SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradeParams(symbol, isIsolated)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query Max Borrow​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#query-max-borrow","content":"SyncAsync try{ MaxBorrowable res = client.getMaxBorrowable(new MaxBorrowable(amount, borrowLimit)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query Max Transfer-Out Amount​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#query-max-transfer-out-amount","content":"SyncAsync try{ MaxTransferable res = client.getMaxTransferable(new MaxTransferableParams(asset, isolatedSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Make an isolated margin account transfer​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#make-an-isolated-margin-account-transfer","content":"SyncAsync try{ IsolatedTransferRecords res = client.newIsolatedTransfer(new NewIsolatedTransferParams(asset, symbol, amount, transFrom, transTo)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin transfer history​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-isolated-margin-transfer-history","content":"By symbolBy symbol and isolated assetWith transfer directionFramed and paginated SyncAsync try{ IsolatedTransferRecords res = client.getIsolatedTransferHistory(new IsolatedTransferHistoryParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query isolated margin account info​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#query-isolated-margin-account-info","content":"AllBy symbol SyncAsync try{ IsolatedAccount res = client.getIsolatedAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Enable isolated margin account for a specific symbol​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#enable-isolated-margin-account-for-a-specific-symbol","content":"SyncAsync try{ ToogleAccountResponse res = client.enableIsolatedAccount(new ToogleAccountParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Disable isolated margin account for a specific symbol​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#disable-isolated-margin-account-for-a-specific-symbol","content":"SyncAsync try{ ToogleAccountResponse res = client.disableIsolatedAccount(new ToogleAccountParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Query enabled isolated margin account limit​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#query-enabled-isolated-margin-account-limit","content":"SyncAsync try{ IsolatedAccountLimit res = client.getEnabledIsolatedAccountLimit().sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about an isolated symbol​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-info-about-an-isolated-symbol","content":"SyncAsync try{ IsolatedSymbol res = client.getIsolatedSymbol(new PairParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get info about all the isolated symbols.​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-info-about-all-the-isolated-symbols","content":"SyncAsync try{ List&lt;IsolatedSymbol&gt; res = client.getAllIsolatedSymbols().sync(); }catch(ApiException e){ //... }  "},{"title":"Toggle BNB Burn On Spot Trade And Margin Interest​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#toggle-bnb-burn-on-spot-trade-and-margin-interest","content":"SyncAsync try{ BNBBurnStatus res = client.toggleBNBBurnOnSpotTradeAndMarginInterest(new ToggleBurnParams(spotBNBBurn, interestBNBBurn)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get BNB Burn Status​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-bnb-burn-status","content":"SyncAsync try{ BNBBurnStatus res = client.getBNBBurnStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Query Margin Interest Rate History​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#query-margin-interest-rate-history","content":"By symbolWith VIP level SyncAsync try{ List&lt;InterestRate&gt; res = client.getInterestRateHistory(new InterestRateHistoryParams(asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get cross margin fee data​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-cross-margin-fee-data","content":"AllBy coinBy coin and VIP level SyncAsync try{ List&lt;CrossFee&gt; res = client.getMarginFeeData().sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin fee data​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-isolated-margin-fee-data","content":"AllBy coinBy coin and VIP level SyncAsync try{ List&lt;IsolatedFee&gt; res = client.getIsolatedFeeData().sync(); }catch(ApiException e){ //... }  "},{"title":"Get isolated margin tier data​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-isolated-margin-tier-data","content":"All tiersBy tier SyncAsync try{ List&lt;IsolatedTierData&gt; res = client.getIsolatedMarginTierData(new IsolatedTierDataParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get order rate limit​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-order-rate-limit","content":"AllBy isolated symbol SyncAsync try{ List&lt;OrderRateLimit&gt; res = client.getOrderRateLimit().sync(); }catch(ApiException e){ //... }  "},{"title":"Get dust log (conversions into BNB of dust assets)​","type":1,"pageTitle":"Margin","url":"docs/endpoints/margin#get-dust-log-conversions-into-bnb-of-dust-assets","content":"AllFramed SyncAsync try{ DustLogRecord res = client.getDustLog().sync(); }catch(ApiException e){ //... }  "},{"title":"Savings endpoint","type":0,"sectionRef":"#","url":"docs/endpoints/savings","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#client-instantiation","content":"SavingsClient client = new SavingsClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#features","content":""},{"title":"Get flexible product list.​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-flexible-product-list","content":"DefaultWith statusFeaturedPaginated SyncAsync try{ FlexibleProduct res = client.getFlexibleProducts().sync(); }catch(ApiException e){ //... }  "},{"title":"Get left daily purchase quota of flexible product​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-left-daily-purchase-quota-of-flexible-product","content":"SyncAsync try{ PurchaseQuota res = client.getLeftDailyFlexiblePurchaseQuota(new PurchaseQuotaParams(productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Left Daily Redemption Quota of Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-left-daily-redemption-quota-of-flexible-product","content":"SyncAsync try{ RedemptionQuota res = client.getLeftDailyRedemptionQuota(new RedemptionQuotaParams(productId, ProductType.FAST)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#purchase-flexible-product","content":"SyncAsync try{ PurchaseResponse res = client.purchaseFlexible(new FlexiblePurchaseParams(productId, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem Flexible Product​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#redeem-flexible-product","content":"SyncAsync try{ client.redeemFlexible(new RedemptionParams(productId, amount, type)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get flexible product position​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-flexible-product-position","content":"DefaultSpecific asset SyncAsync try{ List&lt;FlexibleProductPosition&gt; res = client.getFlexibleProductPosition().sync(); }catch(ApiException e){ //... }  "},{"title":"Get fixed and activity project list​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-fixed-and-activity-project-list","content":"DefaultPaginatedSorted SyncAsync try{ List&lt;FixedProject&gt; res = client.getFixedProjects(new FixedProjectListParams(type, asset, status)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase fixed project​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#purchase-fixed-project","content":"SyncAsync try{ PurchaseResponse res = client.purchaseFixed(new FixedPurchaseParams(productId, lot)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get fixed/activity project position​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-fixedactivity-project-position","content":"SyncAsync try{ List&lt;FixedProjectPosition&gt; res = client.getFixedProjectPosition(new FixedProjectPositionParams(asset, projectId, status)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get lending account​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-lending-account","content":"SyncAsync try{ LendingAccount res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get purchase record​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-purchase-record","content":"DefaultFramed SyncAsync try{ List&lt;Purchase&gt; res = client.getPurchases(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get redemption record​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-redemption-record","content":"DefaultFramed SyncAsync try{ List&lt;Redemption&gt; res = client.getRedemptions(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get interest record​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#get-interest-record","content":"DefaultFramed SyncAsync try{ List&lt;Interest&gt; res = client.getInterests(new LendingParams(LendingType.DAILY, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Change fixed/activity position to daily position​","type":1,"pageTitle":"Savings endpoint","url":"docs/endpoints/savings#change-fixedactivity-position-to-daily-position","content":"SyncAsync try{ PositionChangedResponse res = client.fixedToDailyPosition(new ChangePositionParams(projectId, lot, positionId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Spot","type":0,"sectionRef":"#","url":"docs/endpoints/spot","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#client-instantiation","content":"SpotClient client = new SpotClient(key, secret);  "},{"title":"Testnet client instantiation​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#testnet-client-instantiation","content":"TestnetSpotClient client = new TestnetSpotClient(testnetKey, testnetSecret);  "},{"title":"Features​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#features","content":""},{"title":"Send a Market order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-market-order","content":"BUYSELL SyncAsync try{ NewOrderResponse res = client.newOrder(MarketOrder.buy(symbol, quantity)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Market Quote order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-market-quote-order","content":"BUYSELL SyncAsync try{ NewOrderResponse res = client.newOrder(MarketQuoteOrder.buy(symbol, quoteAssetQty)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Limit order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-limit-order","content":"BUYSELLBUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(LimitOrder.buy(symbol, quantity, price, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Limit Maker order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-limit-maker-order","content":"BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(LimitMakerOrder.buy(symbol, quantity, price)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Stop Loss order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-stop-loss-order","content":"BUY (Stop price)SELL (Stop price)BUY (Trailing delta)SELL (Trailing delta) SyncAsync try{ NewOrderResponse res = client.newOrder(StopLossOrder.buy(symbol, quantity, stopPrice)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Stop Loss Limit order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-stop-loss-limit-order","content":"BUY SELL BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(StopLossOrder.buy(symbol, quantity, price, stopPrice, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Take Profit order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-take-profit-order","content":"BUY (Stop price)SELL (Stop price)BUY (Trailing delta)SELL (Trailing delta) SyncAsync try{ NewOrderResponse res = client.newOrder(TakeProfitOrder.buy(symbol, quantity, stopPrice)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send a Take Profit Limit order.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-a-take-profit-limit-order","content":"BUY SELL BUY (TimeInForce.GTC)SELL (TimeInForce.GTC) SyncAsync try{ NewOrderResponse res = client.newOrder(TakeProfitLimitOrder.buy(symbol, quantity, price, stopPrice, timeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Test an order​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#test-an-order","content":"newOrderTest works like newOrder. SyncAsync try{ client.newOrderTest(MarketOrder.buy(symbol, quantity)).sync(); }catch(ApiException e){ //... }  note buyQuote and sellQuote let you buy the base asset by providing the quote asset amount. "},{"title":"Get open orders​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#get-open-orders","content":"SyncAsync try{ List&lt;OrderInfo&gt; res = client.getOpenOrders().sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel open orders​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#cancel-open-orders","content":"SyncAsync try{ List&lt;CancelOrderResponse&gt; res = client.cancelOpenOrders(new CancelOpenOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Check an order's status​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#check-an-orders-status","content":"SyncAsync try{ OrderInfo res = client.getOrderStatus(new OrderStatusParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an active order​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#cancel-an-active-order","content":"SyncAsync try{ CancelOrderResponse res = client.cancelOrder(new CancelOrderParams(symbol, orderId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Displays the user's current order count usage for all intervals with default request​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#displays-the-users-current-order-count-usage-for-all-intervals-with-default-request","content":"SyncAsync try{ List&lt;OrderCount&gt; res = client.getOrderCount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get current account information​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#get-current-account-information","content":"SyncAsync try{ Account res = client.getAccount().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all orders on a symbol​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#get-all-orders-on-a-symbol","content":"By symbolBy symbol and order id SyncAsync try{ List&lt;OrderInfo&gt; res = client.getAllOrders(new AllOrdersParams(symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get trades for a specific account and symbol.​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#get-trades-for-a-specific-account-and-symbol","content":"From idBy symbol and order id SyncAsync try{ List&lt;Trade&gt; res = client.getTrades(new TradesParams(fromId, symbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Send in an OCO order​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#send-in-an-oco-order","content":"SyncAsync try{ OCOResponse res = client.newOCO(NewOCOOrderParams(symbol, side, quantity, price, stopPrice, stopLimitPrice, stopLimitTimeInForce)).sync(); }catch(ApiException e){ //... }  "},{"title":"Cancel an entire order list​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#cancel-an-entire-order-list","content":"By order idBy client order id SyncAsync try{ OCOResponse res = client.cancelOCO(new CancelOCOParams(symbol, orderListId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Retrieves all OCO​","type":1,"pageTitle":"Spot","url":"docs/endpoints/spot#retrieves-all-oco","content":"DefaultBy order idFramed SyncAsync try{ List&lt;OCOInfo&gt; res = client.getAllOCO().sync(); }catch(ApiException e){ //... }  "},{"title":"Staking","type":0,"sectionRef":"#","url":"docs/endpoints/staking","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#client-instantiation","content":"StakingClient client = new StakingClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#features","content":""},{"title":"Get products​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#get-products","content":"By Product type By Product type and asset SyncAsync try{ List&lt;Product&gt; res = client.getProducts(new ProductListParams(ProductType.STAKING)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get staking history​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#get-staking-history","content":"DefaultPaginated SyncAsync try{ List&lt;StakingRecord&gt; res = client.getHistory(new HistoryParams(ProductType.STAKING, TransactionType.INTEREST, asset)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get personal left quota of Staking product​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#get-personal-left-quota-of-staking-product","content":"SyncAsync try{ LeftQuota res = client.getLeftQuota(new LeftQuotaParams(ProductType.STAKING, productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get Staking product position.​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#get-staking-product-position","content":"StakingFlexible DeFiLocked DeFi SyncAsync try{ List&lt;ProductPosition&gt; res = client.getPosition(new PositionParams(ProductType.STAKING)).sync(); }catch(ApiException e){ //... }  "},{"title":"Purchase Staking product​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#purchase-staking-product","content":"Staking productFlexible DeFi productLocked DeFi product SyncAsync try{ PurchaseResponse res = client.purchase(new PurchaseParams(ProductType.STAKING, productId, amount)).sync(); }catch(ApiException e){ //... }  "},{"title":"Redeem Staking product​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#redeem-staking-product","content":"Staking productFlexible DeFi productLocked DeFi product SyncAsync try{ RedeemResponse res = client.redeem(new RedeemParams(ProductType.STAKING, productId)).sync(); }catch(ApiException e){ //... }  "},{"title":"Set auto staking on Locked Staking or Locked DeFi Staking​","type":1,"pageTitle":"Staking","url":"docs/endpoints/staking#set-auto-staking-on-locked-staking-or-locked-defi-staking","content":"SyncAsync try{ AutoStakingResponse res = client.setAutoStaking(new AutoStakingParams(ProductType.STAKING, productId, true/false)).sync(); }catch(ApiException e){ //... }  "},{"title":"Public data","type":0,"sectionRef":"#","url":"docs/endpoints/vision","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Public data","url":"docs/endpoints/vision#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"SPOT endpoints​","type":1,"pageTitle":"Public data","url":"docs/endpoints/vision#spot-endpoints","content":""},{"title":"Get klines​","type":1,"pageTitle":"Public data","url":"docs/endpoints/vision#get-klines","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getKlines(symbol, CandlestickInterval, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get trades​","type":1,"pageTitle":"Public data","url":"docs/endpoints/vision#get-trades","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getTrades(symbol, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Get aggregate trades​","type":1,"pageTitle":"Public data","url":"docs/endpoints/vision#get-aggregate-trades","content":"ZippedIn a 2d list formatDeserializedGet Checksum MonthlyDaily syncasync VisionSpotClient client = new VisionSpotClient(); try{ ZipInputStream response = client.getAggTrades(symbol, year, month).getZip(); }catch(ApiException e){ //... }  "},{"title":"Websocket streams","type":0,"sectionRef":"#","url":"docs/endpoints/websocket","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#description","content":"Binance4j-websocket is a set of Java connectors for the Binance Websocket API. "},{"title":"Installation​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#installation","content":" "},{"title":"Event Callback​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#event-callback","content":"WebsocketCallback is a generic functional interface every WebsocketClient receives at instantiation that will handle the stream events. WebsocketCallback&lt;Candle&gt; callback = new WebsocketCallback&lt;&gt;{ // Data received from the server @Override public void onMessage(Object response) { //... } // Stream is open @Override public void onOpen(Response response) { //... } // Stream issue @Override public void onFailure(ApiException exception) { //... } // Stream is closing @Override public void onClosing(WebsocketCloseObject websocketCloseObject) { //... } // Stream is closed @Override public void onClosed(WebsocketCloseObject websocketCloseObject) { //... } }; //Client instantiation WebsocketCandlestickClient client = new WebsocketCandlestickClient(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTE, callback); //open stream client.open(); //close stream client.close();  "},{"title":"Configuration​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#configuration","content":"Every WebsocketClient possess a WebsocketClientConfiguration accessible through: client.getConfiguration();  Available parameters Parameter\tType\tDescription\tDefaultbaseUrl\tString\tThe stream base url\twss://stream.binance.com:9443/ws pingInterval\tDuration\tThe interval the client will send a ping\t3m keepAlive\tBoolean\tReconnect if stream is closed by server\ttrue maxReconnections\tInteger\tThe number of time the client tries to reconnect\t5 reconnectionInterval\tDuration\tThe reconnection interval\t10s noResponseTimeout\tDuration\tThe time the client waits for a server response before triggering a timeout\t3m noResponseTimeoutMarginError\tDuration\tMargin error added to WebsocketCandleStickClient noResponseTimeout's configuration\t5s disconnectionTimeout\tDuration\tTime after which the client disconnects if stuck in closing state\t5s disconnectionTimeout\tDuration\tTime after which the client will disconnect. If keepAlive is true, will automatically reconnect. Bypasses server unwanted disconnections.\t1d "},{"title":"Available Websocket clients​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#available-websocket-clients","content":""},{"title":"Individual Symbol Ticker Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#individual-symbol-ticker-streams","content":"Handles 24hr rolling window ticker statistics for a single symbol. One symbolMultiple symbols (List) WebsocketTickerClient client = new WebsocketTickerClient(&quot;BNBBTC&quot;, callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"24hr rolling window mini-ticker statistics.​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#24hr-rolling-window-mini-ticker-statistics","content":"One symbolMultiple symbols (List) WebsocketMiniTickerClient client = new WebsocketMiniTickerClient(&quot;BNBBTC&quot;, callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"All Market Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#all-market-tickers-stream","content":"24hr rolling window ticker statistics for all symbols that changed. WebsocketAllTickersClient client = new WebsocketAllTickersClient(callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"All Market Mini Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#all-market-mini-tickers-stream","content":"24hr rolling window mini-ticker statistics for all symbols that changed. WebsocketAllMiniTickersClient client = new WebsocketAllMiniTickersClient(callback);  caution These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. "},{"title":"Individual Symbol Book Ticker Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#individual-symbol-book-ticker-streams","content":"Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol. One symbolMultiple symbols (List) WebsocketBookTickerClient client = new WebsocketBookTickerClient(&quot;BNBBTC&quot;, callback);  "},{"title":"All Book Tickers Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#all-book-tickers-stream","content":"Pushes any update to the best bid or ask's price or quantity in real-time for all symbols. WebsocketAllBookTickersClient client = new WebsocketAllBookTickersClient(callback);  "},{"title":"Kline/Candlestick Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#klinecandlestick-streams","content":"The Kline/Candlestick Stream push updates to the current klines/candlestick every second. One symbolMultiple symbols (List) WebsocketCandlestickClient client = new WebsocketCandlestickClient(&quot;BNBBTC&quot;, CandlestickInterval.FIVE_MINUTE, callback);  "},{"title":"Diff. Depth Stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#diff-depth-stream","content":"Order book price and quantity depth updates used to locally manage an order book. One symbolMultiple symbols (List) WebsocketDepthClient client = new WebsocketDepthClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Partial Book Depth Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#partial-book-depth-streams","content":"Top bids and asks, Valid are 5, 10, or 20. One symbolMultiple symbols (List) WebsocketMiniDepthClient client = new WebsocketMiniDepthClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Trade Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#trade-streams","content":"The Trade Streams push raw trade information; each trade has a unique buyer and seller. One symbolMultiple symbols (List) WebsocketTradeClient client = new WebsocketTradeClient(&quot;BNBBTC&quot;, callback);  "},{"title":"Aggregate Trade Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#aggregate-trade-streams","content":"The Aggregate Trade Streams push trade information that is aggregated for a single taker order. One symbolMultiple symbols (List) WebsocketAggTradeClient client = new WebsocketAggTradeClient(&quot;BNBBTC&quot;, callback);  "},{"title":"User Data Streams​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#user-data-streams","content":"The User Data Streams push account, balance and order update infos. // Instantiate a UserDataClient UserDataClient userDataClient = new UserDataClient(key,secret); // instantiate the ws client WebsocketUserDataClient client = new WebsocketUserDataClient(userDataClient, callback);  note The client will automatically keep alive the listen key every 30 minutes as advised by Binance. The client handles thoses events: Account Update : outboundAccountPosition is sent any time an account balance has changed and contains the assets that were possibly changed by the event that generated the balance change. Balance Update: Balance Update occurs during the following: Deposits or withdrawals from the accountTransfer of funds between accounts (e.g. Spot to Margin) Order Update: Orders are updated with the executionReport event. Check the Public API Definitions and below for relevant enum definitions. Execution types: NEW - The order has been accepted into the engine.CANCELED - The order has been canceled by the user.REPLACED (currently unused)REJECTED - The order has been rejected and was not processed. (This is never pushed into the User Data Stream)TRADE - Part of the order or all of the order's quantity has filled.EXPIRED - The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) "},{"title":"User data endpoints​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#user-data-endpoints","content":""},{"title":"Start user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#start-user-data-stream","content":"Returns a listen key to open a user data websocket stream. SyncAsync try{ ListenKey res = client.startUserDataStream().sync(); }catch(ApiException e){ //... }  note The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes. If you're using WebsocketUserDataClient, this is done automatically. "},{"title":"Keep alive user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#keep-alive-user-data-stream","content":"Keepalive a user data stream to prevent a time out. SyncAsync try{ client.keepAliveUserDataStream(listenKey).sync(); }catch(ApiException e){ //... }  note User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. If you're using WebsocketUserDataClient, this is done automatically. "},{"title":"Close out a user data stream​","type":1,"pageTitle":"Websocket streams","url":"docs/endpoints/websocket#close-out-a-user-data-stream","content":"SyncAsync try{ client.closeUserDataStream(listenKey).sync(); }catch(ApiException e){ //... }  "},{"title":"Wallet","type":0,"sectionRef":"#","url":"docs/endpoints/wallet","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#installation","content":"MavenGradle pom.xml &lt;dependency&gt; &lt;groupId&gt;{{groupId}}&lt;/groupId&gt; &lt;artifactId&gt;{{artifactId}}&lt;/artifactId&gt; &lt;version&gt;{{version}}&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"Client instantiation​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#client-instantiation","content":"WalletClient client = new WalletClient(key, secret);  "},{"title":"Features​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#features","content":""},{"title":"Get system status​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-system-status","content":"SyncAsync try{ SystemStatus res = client.getSystemStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get all coins info​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-all-coins-info","content":"SyncAsync try{ CoinInformation&gt; res = client.getAllCoinsInfo().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Spot account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-spot-account-snapshot","content":"DefaultFramed SyncAsync try{ SpotAccountSnapshotResponse res = client.getSpotAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Margin account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-margin-account-snapshot","content":"DefaultFramed SyncAsync try{ MarginAccountSnapshotResponse res = client.getMarginAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Get Futures account snapshot​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-futures-account-snapshot","content":"DefaultFramed SyncAsync try{ FuturesAccountSnapshotResponse res = client.getFuturesAccountSnapshot().sync(); }catch(ApiException e){ //... }  "},{"title":"Enable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#enable-fast-withdraw-switch","content":"SyncAsync try{ client.enableFastWithdrawSwitch().sync(); }catch(ApiException e){ //... }  "},{"title":"Disable fast withdraw switch​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#disable-fast-withdraw-switch","content":"SyncAsync try{ client.disableFastWithdrawSwitch().sync(); }catch(ApiException e){ //... }  "},{"title":"Withdraw​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#withdraw","content":"SyncAsync try{ WithdrawResult res = client.withdraw(new WithdrawParams(amount, asset, address)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get deposit history​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-deposit-history","content":"DefaultBy assetBy statusBothFramed SyncAsync try{ List&lt;DepositHistory&gt; res = client.getDepositHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get withdraw history​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-withdraw-history","content":"DefaultBy statusBy asset and statusBy withdraw order idFramed SyncAsync try{ List&lt;WithdrawHistory&gt; res = client.getWithdrawHistory().sync(); }catch(ApiException e){ //... }  "},{"title":"Get deposit address​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-deposit-address","content":"DefaultBy coinBy coin and network SyncAsync try{ DepositAddress res = client.getDepositAddress().sync(); }catch(ApiException e){ //... }  "},{"title":"Get account status​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-account-status","content":"SyncAsync try{ AccountStatus res = client.getAccountstatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get API trading status​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-api-trading-status","content":"SyncAsync try{ ApiTradingStatus res = client.getApiTradingStatus().sync(); }catch(ApiException e){ //... }  "},{"title":"Get dust log​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-dust-log","content":"DefaultFramed SyncAsync try{ DustLog res = client.getDustLog().sync(); }catch(ApiException e){ //... }  "},{"title":"Do a dust transfer​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#do-a-dust-transfer","content":"DefaultMultiple symbols SyncAsync try{ DustTransferResponse res = client.dustTransfer().sync(); }catch(ApiException e){ //... }  "},{"title":"Get asset dividend record​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-asset-dividend-record","content":"DefaultSpecific symbolSpecific symbol framedFramed SyncAsync try{ AssetDividendRecord res = client.getAssetDividendRecord().sync(); }catch(ApiException e){ //... }  "},{"title":"Get asset detail​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-asset-detail","content":"DefaultSpecific symbol SyncAsync try{ Map&lt;String, AssetDetail&gt; res = client.getAssetDetail().sync(); }catch(ApiException e){ //... }  "},{"title":"Get trade fee​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-trade-fee","content":"DefaultSpecific symbol SyncAsync try{ List&lt;TradeFee&gt; res = client.getTradeFee().sync(); }catch(ApiException e){ //... }  "},{"title":"Make a universal transfer​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#make-a-universal-transfer","content":"SyncAsync try{ WalletTransferResponse res = client.transfer(new WalletTransferParams(asset, type, amount, fromSymbol, toSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get transfer history​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-transfer-history","content":"SyncAsync try{ WalletTransferHistory res = client.getTransferHistory(new WalletTransferHistoryParams(type, fromSymbol, toSymbol)).sync(); }catch(ApiException e){ //... }  "},{"title":"Get funding asset​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-funding-asset","content":"Fetches the funding wallet asset balance Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token DefaultSpecific asset SyncAsync try{ List&lt;FundingAsset&gt; res = client.getFundingWallet().sync(); }catch(ApiException e){ //... }  "},{"title":"Get API permissions​","type":1,"pageTitle":"Wallet","url":"docs/endpoints/wallet#get-api-permissions","content":"SyncAsync try{ ApiPermissions res = client.getApiPermissions().sync(); }catch(ApiException e){ //... }  "},{"title":"Trading strategies","type":0,"sectionRef":"#","url":"docs/Strategy/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#description","content":"Binance4j-strategy adds technical analysis for the binance4j ecosystem thanks to ta4j indicators and rules. "},{"title":"Installation​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#installation","content":" "},{"title":"What is a trading strategy?​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#what-is-a-trading-strategy","content":"A trading strategy is a class containing two methods receiveing a BarSeries as an input and returning a trading Rule as an output, the first will send a BUY signal and the other a SELL signal. Every trading strategy must implement the TradingStrategy interface. This is the signature of the interface: public interface TradingStrategy { // The BUY signal Rule entry(BarSeries series); // The SELL signal Rule exit(BarSeries series); }  note Binance4j-strategy uses ta4j for technical analysis, don't hesitate to read their documentation to understand what are indicators and rules. "},{"title":"Creating a trading strategy​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#creating-a-trading-strategy","content":"Here is a trading strategy using the two period RSI indicator: public class TwoPeriodRSIStrategy implements TradingStrategy { @Override public Rule entry(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Entry rule // The long-term trend is up when a security is above its 200-period SMA. return new OverIndicatorRule(shortSma, longSma) // Trend .and(new CrossedDownIndicatorRule(rsi, 5)) // Signal 1 .and(new OverIndicatorRule(shortSma, closePrice)); // Signal 2 } @Override public Rule exit(BarSeries series) { ClosePriceIndicator closePrice = new ClosePriceIndicator(series); SMAIndicator shortSma = new SMAIndicator(closePrice, 5); SMAIndicator longSma = new SMAIndicator(closePrice, 200); // We use a 2-period RSI indicator to identify buying // or selling opportunities within the bigger trend. RSIIndicator rsi = new RSIIndicator(closePrice, 2); // Exit rule // The long-term trend is down when a security is below its 200-period SMA. return new UnderIndicatorRule(shortSma, longSma) // Trend .and(new CrossedUpIndicatorRule(rsi, 95)) // Signal 1 .and(new UnderIndicatorRule(shortSma, closePrice)); // Signal 2 } }  "},{"title":"Backtesting a strategy​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#backtesting-a-strategy","content":"Binance4j can backtest a trading strategy in many ways. "},{"title":"With existing data​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#with-existing-data","content":"// Here we get historical klines data from the public data API. List&lt;Candle&gt; bars = new VisionSpotClient().getKlines(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;).getData(); // let's give it to the BackTestService. CandlestickInterval must match. BackTestResult result = BackTestService.backTest(strategy, bars, CandlestickInterval.FIVE_MINUTES); // we can also use a ta4j Barseries instance. Let's convert the existing candles BarSeries series = BarSeriesService.convert(bars,CandlestickInterval.FIVE_MINUTES); BackTestResult result = BackTestService.backTest(strategy, series);  "},{"title":"With inner vision client​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#with-inner-vision-client","content":"The service can automatically use an instance of a VisionSpotClient to collect public data from the Binance API. // The service will automatically use an instance of a VisionClient to get the data from the API BackTestResult result = BackTestService.backTest(strategy, &quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTES, &quot;2022&quot;, &quot;01&quot;);  "},{"title":"Get the strategy position other a BarSeries​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#get-the-strategy-position-other-a-barseries","content":"The PositionService service can give us the position of our strategy over a BarSeries instance. //The service will tell us if the strategy sends a BUY signal over the given index on the BarSeries boolean shouldEnter = PositionService.shouldEnter(strategy, series, index); //The service will tell us if the strategy sends a SELL signal over the given index on the BarSeries boolean shouldExit = PositionService.shouldExit(strategy, series, index); //The service will tell us if the strategy sends a BUY signal over the last Bar in the BarSeries boolean shouldEnter = PositionService.shouldEnter(strategy, series); //The service will tell us if the strategy sends a SELL signal over the last Bar in the BarSeries boolean shouldExit = PositionService.shouldExit(strategy, series);  "},{"title":"Live trading​","type":1,"pageTitle":"Trading strategies","url":"docs/Strategy/#live-trading","content":"In order to handle your strategy signals, you need to implement a StrategyCallback. public class MyStrategyCallback implements StrategyCallback { public MyStrategyCallback() { //... } // Handle BUY signal @Override public void onEnter(BarSeries series) { //... } // Handle SELL signal @Override public void onExit(BarSeries series) { //... } // server sent data @Override public void onMessage(SymbolBar symbolBar) { //... } // Stream is open @Override public void onOpen(Response response) { //... } // Stream is closing @Override public void onClosing(WebsocketCloseObject closeObject) { //... } // Stream is closed @Override public void onClosed(WebsocketCloseObject closeObject) { //... } // Something went wrong @Override public void onFailure(ApiException apiException) { //... } }  Let's instantiate and run a service. //we will use the previous strategy WatchService service = new WatchService(strategy, myStrategyCallback); service.watch(&quot;BTCBUSD&quot;, CandlestickInterval.FIVE_MINUTE);  When done, stop the service: service.unwatch();  "}]